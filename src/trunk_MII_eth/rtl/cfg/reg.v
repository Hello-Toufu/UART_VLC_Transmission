//THIS FILE IS GENERATED BY REG_BUILDER
`ifndef DELAY
    `define DELAY #0.1
`endif


module REG #(
    parameter AWIDTH = 16,
    parameter DWIDTH = 16
) (
    input                       i_cfg_clk           
    ,input                      i_cfg_rst_n         
    ,input       [AWIDTH-1:0]   i_cfg_addr                   
    ,input                      i_cfg_wr_en                  
    ,input       [DWIDTH-1:0]   i_cfg_wr_data                
    ,input                      i_cfg_rd_en                  
    ,output      [DWIDTH-1:0]   o_cfg_rd_data                

    ,output                              o_soft_pcs_rst
    ,output                              o_soft_tx_rst
    ,output                              o_soft_rx_rst
    ,output  [15:0]                      o_rw_scratch
    ,output                              o_tx_x1_mode_en
    ,output                              o_rx_x1_mode_en
    ,output                              o_tx_rs_en
    ,output                              o_rx_rs_en
    ,input                               i_comma_aligned_l0
    ,input                               i_comma_aligned_l1
    ,input                               i_comma_aligned_l2
    ,input                               i_comma_aligned_l3
    ,output                              o_disp_err_l0_clr
    ,input                               i_disp_err_l0
    ,output                              o_disp_err_l1_clr
    ,input                               i_disp_err_l1
    ,output                              o_disp_err_l2_clr
    ,input                               i_disp_err_l2
    ,output                              o_disp_err_l3_clr
    ,input                               i_disp_err_l3
    ,output  [4:0]                       o_rxld_half_thres
    ,output  [7:0]                       o_rxld_align_det_thres
    ,output  [7:0]                       o_rxld_align_los_thres
    ,output                              o_rxld_overflow_l0_clr
    ,input                               i_rxld_overflow_l0
    ,output                              o_rxld_overflow_l1_clr
    ,input                               i_rxld_overflow_l1
    ,output                              o_rxld_overflow_l2_clr
    ,input                               i_rxld_overflow_l2
    ,output                              o_rxld_overflow_l3_clr
    ,input                               i_rxld_overflow_l3
    ,output                              o_rxld_underflow_l0_clr
    ,input                               i_rxld_underflow_l0
    ,output                              o_rxld_underflow_l1_clr
    ,input                               i_rxld_underflow_l1
    ,output                              o_rxld_underflow_l2_clr
    ,input                               i_rxld_underflow_l2
    ,output                              o_rxld_underflow_l3_clr
    ,input                               i_rxld_underflow_l3
    ,input                               i_rxld_aligned
    ,output                              o_rs_fail_l0_clr
    ,input                               i_rs_fail_l0
    ,output                              o_rs_fail_l1_clr
    ,input                               i_rs_fail_l1
    ,output                              o_rs_fail_l2_clr
    ,input                               i_rs_fail_l2
    ,output                              o_rs_fail_l3_clr
    ,input                               i_rs_fail_l3
    ,output                              o_rs_found_l0_clr
    ,input                               i_rs_found_l0
    ,output                              o_rs_found_l1_clr
    ,input                               i_rs_found_l1
    ,output                              o_rs_found_l2_clr
    ,input                               i_rs_found_l2
    ,output                              o_rs_found_l3_clr
    ,input                               i_rs_found_l3
    ,output                              o_rs_fail_cnt_l0_clr
    ,input   [15:0]                      i_rs_fail_cnt_l0
    ,output                              o_rs_fail_cnt_l1_clr
    ,input   [15:0]                      i_rs_fail_cnt_l1
    ,output                              o_rs_fail_cnt_l2_clr
    ,input   [15:0]                      i_rs_fail_cnt_l2
    ,output                              o_rs_fail_cnt_l3_clr
    ,input   [15:0]                      i_rs_fail_cnt_l3
    ,output                              o_rs_err_num_cnt_l0_clr
    ,input   [15:0]                      i_rs_err_num_cnt_l0
    ,output                              o_rs_err_num_cnt_l1_clr
    ,input   [15:0]                      i_rs_err_num_cnt_l1
    ,output                              o_rs_err_num_cnt_l2_clr
    ,input   [15:0]                      i_rs_err_num_cnt_l2
    ,output                              o_rs_err_num_cnt_l3_clr
    ,input   [15:0]                      i_rs_err_num_cnt_l3
    ,output                              o_manchest_en
    ,output                              o_pol_adj_en
    ,output                              o_pol_cont_adj
    ,output                              o_pol_ow_l0
    ,output                              o_pol_ow_l1
    ,output                              o_pol_ow_l2
    ,output                              o_pol_ow_l3
    ,output                              o_pol_ow_val_l0
    ,output                              o_pol_ow_val_l1
    ,output                              o_pol_ow_val_l2
    ,output                              o_pol_ow_val_l3
    ,input                               i_rxpol_done_l0
    ,input                               i_rxpol_done_l1
    ,input                               i_rxpol_done_l2
    ,input                               i_rxpol_done_l3
    ,input                               i_rxpol_status_l0
    ,input                               i_rxpol_status_l1
    ,input                               i_rxpol_status_l2
    ,input                               i_rxpol_status_l3
    ,output                              o_speed_sel_ow
    ,output                              o_speed_sel
    ,output  [13:0]                      o_mci_addr
    ,output [31:0]                       o_mci_wdata
    ,output                              o_mci_val
    ,output                              o_mci_rdwn
    ,output  [3:0]                       o_mci_be
    ,input                               i_mci_ack
    ,input                               i_mci_intr
    ,input [31:0]                        i_mci_rdata
    ,output                              o_mci_owner


);


    reg         [15:0]    c_rd_data                       ;
    
    
    reg                                  r_rw1_soft_pcs_rst;
    reg                                  r_rw1_soft_tx_rst;
    reg                                  r_rw1_soft_rx_rst;
    reg  [15:0]                          r_rw16_rw_scratch;
    reg                                  r_rw1_tx_x1_mode_en;
    reg                                  r_rw1_rx_x1_mode_en;
    reg                                  r_rw1_tx_rs_en;
    reg                                  r_rw1_rx_rs_en;
    wire                                 r_ro1_comma_aligned_l0;
    wire                                 r_ro1_comma_aligned_l1;
    wire                                 r_ro1_comma_aligned_l2;
    wire                                 r_ro1_comma_aligned_l3;
    wire                                 r_ro1_disp_err_l0;
    wire                                 r_ro1_disp_err_l1;
    wire                                 r_ro1_disp_err_l2;
    wire                                 r_ro1_disp_err_l3;
    reg  [4:0]                           r_rw5_rxld_half_thres;
    reg  [7:0]                           r_rw8_rxld_align_det_thres;
    reg  [7:0]                           r_rw8_rxld_align_los_thres;
    wire                                 r_ro1_rxld_overflow_l0;
    wire                                 r_ro1_rxld_overflow_l1;
    wire                                 r_ro1_rxld_overflow_l2;
    wire                                 r_ro1_rxld_overflow_l3;
    wire                                 r_ro1_rxld_underflow_l0;
    wire                                 r_ro1_rxld_underflow_l1;
    wire                                 r_ro1_rxld_underflow_l2;
    wire                                 r_ro1_rxld_underflow_l3;
    wire                                 r_ro1_rxld_aligned;
    wire                                 r_ro1_rs_fail_l0;
    wire                                 r_ro1_rs_fail_l1;
    wire                                 r_ro1_rs_fail_l2;
    wire                                 r_ro1_rs_fail_l3;
    wire                                 r_ro1_rs_found_l0;
    wire                                 r_ro1_rs_found_l1;
    wire                                 r_ro1_rs_found_l2;
    wire                                 r_ro1_rs_found_l3;
    wire [15:0]                          r_ro16_rs_fail_cnt_l0;
    wire [15:0]                          r_ro16_rs_fail_cnt_l1;
    wire [15:0]                          r_ro16_rs_fail_cnt_l2;
    wire [15:0]                          r_ro16_rs_fail_cnt_l3;
    wire [15:0]                          r_ro16_rs_err_num_cnt_l0;
    wire [15:0]                          r_ro16_rs_err_num_cnt_l1;
    wire [15:0]                          r_ro16_rs_err_num_cnt_l2;
    wire [15:0]                          r_ro16_rs_err_num_cnt_l3;
    reg                                  r_rw1_manchest_en;
    reg                                  r_rw1_pol_adj_en;
    reg                                  r_rw1_pol_cont_adj;
    reg                                  r_rw1_pol_ow_l0;
    reg                                  r_rw1_pol_ow_l1;
    reg                                  r_rw1_pol_ow_l2;
    reg                                  r_rw1_pol_ow_l3;
    reg                                  r_rw1_pol_ow_val_l0;
    reg                                  r_rw1_pol_ow_val_l1;
    reg                                  r_rw1_pol_ow_val_l2;
    reg                                  r_rw1_pol_ow_val_l3;
    wire                                 r_ro1_rxpol_done_l0;
    wire                                 r_ro1_rxpol_done_l1;
    wire                                 r_ro1_rxpol_done_l2;
    wire                                 r_ro1_rxpol_done_l3;
    wire                                 r_ro1_rxpol_status_l0;
    wire                                 r_ro1_rxpol_status_l1;
    wire                                 r_ro1_rxpol_status_l2;
    wire                                 r_ro1_rxpol_status_l3;
    reg                                  r_rw1_speed_sel_ow;
    reg                                  r_rw1_speed_sel;
    reg  [13:0]                          r_rw14_mci_addr;
    reg  [15:0]                          r_rw16_mci_wdata;
    reg  [15:0]                          r_rw16_mci_wdata_ext_1;
    reg                                  r_rw1_mci_val;
    reg                                  r_rw1_mci_rdwn;
    reg  [3:0]                           r_rw4_mci_be;
    wire                                 r_ro1_mci_ack;
    wire                                 r_ro1_mci_intr;
    wire [15:0]                          r_ro16_mci_rdata;
    wire [15:0]                          r_ro16_mci_rdata_ext_1;
    reg                                  r_rw1_mci_owner;


    
   always @ (posedge i_cfg_clk or negedge i_cfg_rst_n) begin
        if(~i_cfg_rst_n) begin
            r_rw1_soft_pcs_rst           <= `DELAY `DEFVAL_SOFT_PCS_RST;
            r_rw1_soft_tx_rst            <= `DELAY `DEFVAL_SOFT_TX_RST;
            r_rw1_soft_rx_rst            <= `DELAY `DEFVAL_SOFT_RX_RST;
            r_rw16_rw_scratch            <= `DELAY `DEFVAL_RW_SCRATCH;
            r_rw1_tx_x1_mode_en          <= `DELAY `DEFVAL_TX_X1_MODE_EN;
            r_rw1_rx_x1_mode_en          <= `DELAY `DEFVAL_RX_X1_MODE_EN;
            r_rw1_tx_rs_en               <= `DELAY `DEFVAL_TX_RS_EN;
            r_rw1_rx_rs_en               <= `DELAY `DEFVAL_RX_RS_EN;
            r_rw5_rxld_half_thres        <= `DELAY `DEFVAL_RXLD_HALF_THRES;
            r_rw8_rxld_align_det_thres   <= `DELAY `DEFVAL_RXLD_ALIGN_DET_THRES;
            r_rw8_rxld_align_los_thres   <= `DELAY `DEFVAL_RXLD_ALIGN_LOS_THRES;
            r_rw1_manchest_en            <= `DELAY `DEFVAL_MANCHEST_EN;
            r_rw1_pol_adj_en             <= `DELAY `DEFVAL_POL_ADJ_EN;
            r_rw1_pol_cont_adj           <= `DELAY `DEFVAL_POL_CONT_ADJ;
            r_rw1_pol_ow_l0              <= `DELAY `DEFVAL_POL_OW_L0;
            r_rw1_pol_ow_l1              <= `DELAY `DEFVAL_POL_OW_L1;
            r_rw1_pol_ow_l2              <= `DELAY `DEFVAL_POL_OW_L2;
            r_rw1_pol_ow_l3              <= `DELAY `DEFVAL_POL_OW_L3;
            r_rw1_pol_ow_val_l0          <= `DELAY `DEFVAL_POL_OW_VAL_L0;
            r_rw1_pol_ow_val_l1          <= `DELAY `DEFVAL_POL_OW_VAL_L1;
            r_rw1_pol_ow_val_l2          <= `DELAY `DEFVAL_POL_OW_VAL_L2;
            r_rw1_pol_ow_val_l3          <= `DELAY `DEFVAL_POL_OW_VAL_L3;
            r_rw1_speed_sel_ow           <= `DELAY `DEFVAL_SPEED_SEL_OW;
            r_rw1_speed_sel              <= `DELAY `DEFVAL_SPEED_SEL;
            r_rw14_mci_addr              <= `DELAY `DEFVAL_MCI_ADDR;
            r_rw16_mci_wdata             <= `DELAY `DEFVAL_MCI_WDATA;
            r_rw16_mci_wdata_ext_1       <= `DELAY `DEFVAL_MCI_WDATA_EXT_1;
            r_rw1_mci_val                <= `DELAY `DEFVAL_MCI_VAL;
            r_rw1_mci_rdwn               <= `DELAY `DEFVAL_MCI_RDWN;
            r_rw4_mci_be                 <= `DELAY `DEFVAL_MCI_BE;
            r_rw1_mci_owner              <= `DELAY `DEFVAL_MCI_OWNER;

        end
        else begin
            if(i_cfg_wr_en) begin
                case(i_cfg_addr)
                    `ADDR_RESET_CTRL: begin
                        r_rw1_soft_pcs_rst  <= `DELAY i_cfg_wr_data[`RANGE_SOFT_PCS_RST];
                        r_rw1_soft_tx_rst  <= `DELAY i_cfg_wr_data[`RANGE_SOFT_TX_RST];
                        r_rw1_soft_rx_rst  <= `DELAY i_cfg_wr_data[`RANGE_SOFT_RX_RST];
                    end
                    `ADDR_RW_TEST: begin
                        r_rw16_rw_scratch  <= `DELAY i_cfg_wr_data[`RANGE_RW_SCRATCH];
                    end
                    `ADDR_LANE_MODE: begin
                        r_rw1_tx_x1_mode_en  <= `DELAY i_cfg_wr_data[`RANGE_TX_X1_MODE_EN];
                        r_rw1_rx_x1_mode_en  <= `DELAY i_cfg_wr_data[`RANGE_RX_X1_MODE_EN];
                    end
                    `ADDR_RS_CTRL: begin
                        r_rw1_tx_rs_en   <= `DELAY i_cfg_wr_data[`RANGE_TX_RS_EN];
                        r_rw1_rx_rs_en   <= `DELAY i_cfg_wr_data[`RANGE_RX_RS_EN];
                    end
                    `ADDR_RXLD_CTRL1: begin
                        r_rw5_rxld_half_thres  <= `DELAY i_cfg_wr_data[`RANGE_RXLD_HALF_THRES];
                    end
                    `ADDR_RXLD_CTRL2: begin
                        r_rw8_rxld_align_det_thres  <= `DELAY i_cfg_wr_data[`RANGE_RXLD_ALIGN_DET_THRES];
                        r_rw8_rxld_align_los_thres  <= `DELAY i_cfg_wr_data[`RANGE_RXLD_ALIGN_LOS_THRES];
                    end
                    `ADDR_MANCHEST_CTRL: begin
                        r_rw1_manchest_en  <= `DELAY i_cfg_wr_data[`RANGE_MANCHEST_EN];
                        r_rw1_pol_adj_en  <= `DELAY i_cfg_wr_data[`RANGE_POL_ADJ_EN];
                        r_rw1_pol_cont_adj  <= `DELAY i_cfg_wr_data[`RANGE_POL_CONT_ADJ];
                    end
                    `ADDR_RXPOL_OW: begin
                        r_rw1_pol_ow_l0  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_L0];
                        r_rw1_pol_ow_l1  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_L1];
                        r_rw1_pol_ow_l2  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_L2];
                        r_rw1_pol_ow_l3  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_L3];
                        r_rw1_pol_ow_val_l0  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_VAL_L0];
                        r_rw1_pol_ow_val_l1  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_VAL_L1];
                        r_rw1_pol_ow_val_l2  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_VAL_L2];
                        r_rw1_pol_ow_val_l3  <= `DELAY i_cfg_wr_data[`RANGE_POL_OW_VAL_L3];
                    end
                    `ADDR_SPEED_SEL: begin
                        r_rw1_speed_sel_ow  <= `DELAY i_cfg_wr_data[`RANGE_SPEED_SEL_OW];
                        r_rw1_speed_sel  <= `DELAY i_cfg_wr_data[`RANGE_SPEED_SEL];
                    end
                    `ADDR_GMAC_CFG1: begin
                        r_rw14_mci_addr  <= `DELAY i_cfg_wr_data[`RANGE_MCI_ADDR];
                    end
                    `ADDR_GMAC_CFG2: begin
                        r_rw16_mci_wdata  <= `DELAY i_cfg_wr_data[`RANGE_MCI_WDATA];
                    end
                    `ADDR_GMAC_CFG3: begin
                        r_rw16_mci_wdata_ext_1  <= `DELAY i_cfg_wr_data[`RANGE_MCI_WDATA_EXT_1];
                    end
                    `ADDR_GMAC_CFG4: begin
                        r_rw1_mci_val    <= `DELAY i_cfg_wr_data[`RANGE_MCI_VAL];
                        r_rw1_mci_rdwn   <= `DELAY i_cfg_wr_data[`RANGE_MCI_RDWN];
                        r_rw4_mci_be     <= `DELAY i_cfg_wr_data[`RANGE_MCI_BE];
                    end
                    `ADDR_GMAC_CFG_OWNER: begin
                        r_rw1_mci_owner  <= `DELAY i_cfg_wr_data[`RANGE_MCI_OWNER];
                    end

                endcase
            end
        end
    end
        
    always @ ( * ) begin
        c_rd_data = 16'h0;
        if(i_cfg_rd_en) begin
            case(i_cfg_addr)
                `ADDR_RESET_CTRL: begin
                    c_rd_data[`RANGE_SOFT_PCS_RST] = r_rw1_soft_pcs_rst;
                    c_rd_data[`RANGE_SOFT_TX_RST] = r_rw1_soft_tx_rst;
                    c_rd_data[`RANGE_SOFT_RX_RST] = r_rw1_soft_rx_rst;
                end
                `ADDR_RW_TEST: begin
                    c_rd_data[`RANGE_RW_SCRATCH] = r_rw16_rw_scratch;
                end
                `ADDR_LANE_MODE: begin
                    c_rd_data[`RANGE_TX_X1_MODE_EN] = r_rw1_tx_x1_mode_en;
                    c_rd_data[`RANGE_RX_X1_MODE_EN] = r_rw1_rx_x1_mode_en;
                end
                `ADDR_RS_CTRL: begin
                    c_rd_data[`RANGE_TX_RS_EN] = r_rw1_tx_rs_en;
                    c_rd_data[`RANGE_RX_RS_EN] = r_rw1_rx_rs_en;
                end
                `ADDR_RX_DEC_STAT: begin
                    c_rd_data[`RANGE_COMMA_ALIGNED_L0] = r_ro1_comma_aligned_l0;
                    c_rd_data[`RANGE_COMMA_ALIGNED_L1] = r_ro1_comma_aligned_l1;
                    c_rd_data[`RANGE_COMMA_ALIGNED_L2] = r_ro1_comma_aligned_l2;
                    c_rd_data[`RANGE_COMMA_ALIGNED_L3] = r_ro1_comma_aligned_l3;
                    c_rd_data[`RANGE_DISP_ERR_L0] = r_ro1_disp_err_l0;
                    c_rd_data[`RANGE_DISP_ERR_L1] = r_ro1_disp_err_l1;
                    c_rd_data[`RANGE_DISP_ERR_L2] = r_ro1_disp_err_l2;
                    c_rd_data[`RANGE_DISP_ERR_L3] = r_ro1_disp_err_l3;
                end
                `ADDR_RXLD_CTRL1: begin
                    c_rd_data[`RANGE_RXLD_HALF_THRES] = r_rw5_rxld_half_thres;
                end
                `ADDR_RXLD_CTRL2: begin
                    c_rd_data[`RANGE_RXLD_ALIGN_DET_THRES] = r_rw8_rxld_align_det_thres;
                    c_rd_data[`RANGE_RXLD_ALIGN_LOS_THRES] = r_rw8_rxld_align_los_thres;
                end
                `ADDR_RXLD_STAT: begin
                    c_rd_data[`RANGE_RXLD_OVERFLOW_L0] = r_ro1_rxld_overflow_l0;
                    c_rd_data[`RANGE_RXLD_OVERFLOW_L1] = r_ro1_rxld_overflow_l1;
                    c_rd_data[`RANGE_RXLD_OVERFLOW_L2] = r_ro1_rxld_overflow_l2;
                    c_rd_data[`RANGE_RXLD_OVERFLOW_L3] = r_ro1_rxld_overflow_l3;
                    c_rd_data[`RANGE_RXLD_UNDERFLOW_L0] = r_ro1_rxld_underflow_l0;
                    c_rd_data[`RANGE_RXLD_UNDERFLOW_L1] = r_ro1_rxld_underflow_l1;
                    c_rd_data[`RANGE_RXLD_UNDERFLOW_L2] = r_ro1_rxld_underflow_l2;
                    c_rd_data[`RANGE_RXLD_UNDERFLOW_L3] = r_ro1_rxld_underflow_l3;
                    c_rd_data[`RANGE_RXLD_ALIGNED] = r_ro1_rxld_aligned;
                end
                `ADDR_RS_STATUS: begin
                    c_rd_data[`RANGE_RS_FAIL_L0] = r_ro1_rs_fail_l0;
                    c_rd_data[`RANGE_RS_FAIL_L1] = r_ro1_rs_fail_l1;
                    c_rd_data[`RANGE_RS_FAIL_L2] = r_ro1_rs_fail_l2;
                    c_rd_data[`RANGE_RS_FAIL_L3] = r_ro1_rs_fail_l3;
                    c_rd_data[`RANGE_RS_FOUND_L0] = r_ro1_rs_found_l0;
                    c_rd_data[`RANGE_RS_FOUND_L1] = r_ro1_rs_found_l1;
                    c_rd_data[`RANGE_RS_FOUND_L2] = r_ro1_rs_found_l2;
                    c_rd_data[`RANGE_RS_FOUND_L3] = r_ro1_rs_found_l3;
                end
                `ADDR_RS_FAIL_CNT_L0: begin
                    c_rd_data[`RANGE_RS_FAIL_CNT_L0] = r_ro16_rs_fail_cnt_l0;
                end
                `ADDR_RS_FAIL_CNT_L1: begin
                    c_rd_data[`RANGE_RS_FAIL_CNT_L1] = r_ro16_rs_fail_cnt_l1;
                end
                `ADDR_RS_FAIL_CNT_L2: begin
                    c_rd_data[`RANGE_RS_FAIL_CNT_L2] = r_ro16_rs_fail_cnt_l2;
                end
                `ADDR_RS_FAIL_CNT_L3: begin
                    c_rd_data[`RANGE_RS_FAIL_CNT_L3] = r_ro16_rs_fail_cnt_l3;
                end
                `ADDR_RS_COR_NUM_CNT_L0: begin
                    c_rd_data[`RANGE_RS_ERR_NUM_CNT_L0] = r_ro16_rs_err_num_cnt_l0;
                end
                `ADDR_RS_COR_NUM_CNT_L1: begin
                    c_rd_data[`RANGE_RS_ERR_NUM_CNT_L1] = r_ro16_rs_err_num_cnt_l1;
                end
                `ADDR_RS_COR_NUM_CNT_L2: begin
                    c_rd_data[`RANGE_RS_ERR_NUM_CNT_L2] = r_ro16_rs_err_num_cnt_l2;
                end
                `ADDR_RS_COR_NUM_CNT_L3: begin
                    c_rd_data[`RANGE_RS_ERR_NUM_CNT_L3] = r_ro16_rs_err_num_cnt_l3;
                end
                `ADDR_MANCHEST_CTRL: begin
                    c_rd_data[`RANGE_MANCHEST_EN] = r_rw1_manchest_en;
                    c_rd_data[`RANGE_POL_ADJ_EN] = r_rw1_pol_adj_en;
                    c_rd_data[`RANGE_POL_CONT_ADJ] = r_rw1_pol_cont_adj;
                end
                `ADDR_RXPOL_OW: begin
                    c_rd_data[`RANGE_POL_OW_L0] = r_rw1_pol_ow_l0;
                    c_rd_data[`RANGE_POL_OW_L1] = r_rw1_pol_ow_l1;
                    c_rd_data[`RANGE_POL_OW_L2] = r_rw1_pol_ow_l2;
                    c_rd_data[`RANGE_POL_OW_L3] = r_rw1_pol_ow_l3;
                    c_rd_data[`RANGE_POL_OW_VAL_L0] = r_rw1_pol_ow_val_l0;
                    c_rd_data[`RANGE_POL_OW_VAL_L1] = r_rw1_pol_ow_val_l1;
                    c_rd_data[`RANGE_POL_OW_VAL_L2] = r_rw1_pol_ow_val_l2;
                    c_rd_data[`RANGE_POL_OW_VAL_L3] = r_rw1_pol_ow_val_l3;
                end
                `ADDR_RXPOL_STATUS: begin
                    c_rd_data[`RANGE_RXPOL_DONE_L0] = r_ro1_rxpol_done_l0;
                    c_rd_data[`RANGE_RXPOL_DONE_L1] = r_ro1_rxpol_done_l1;
                    c_rd_data[`RANGE_RXPOL_DONE_L2] = r_ro1_rxpol_done_l2;
                    c_rd_data[`RANGE_RXPOL_DONE_L3] = r_ro1_rxpol_done_l3;
                    c_rd_data[`RANGE_RXPOL_STATUS_L0] = r_ro1_rxpol_status_l0;
                    c_rd_data[`RANGE_RXPOL_STATUS_L1] = r_ro1_rxpol_status_l1;
                    c_rd_data[`RANGE_RXPOL_STATUS_L2] = r_ro1_rxpol_status_l2;
                    c_rd_data[`RANGE_RXPOL_STATUS_L3] = r_ro1_rxpol_status_l3;
                end
                `ADDR_SPEED_SEL: begin
                    c_rd_data[`RANGE_SPEED_SEL_OW] = r_rw1_speed_sel_ow;
                    c_rd_data[`RANGE_SPEED_SEL] = r_rw1_speed_sel;
                end
                `ADDR_GMAC_CFG1: begin
                    c_rd_data[`RANGE_MCI_ADDR] = r_rw14_mci_addr;
                end
                `ADDR_GMAC_CFG2: begin
                    c_rd_data[`RANGE_MCI_WDATA] = r_rw16_mci_wdata;
                end
                `ADDR_GMAC_CFG3: begin
                    c_rd_data[`RANGE_MCI_WDATA_EXT_1] = r_rw16_mci_wdata_ext_1;
                end
                `ADDR_GMAC_CFG4: begin
                    c_rd_data[`RANGE_MCI_VAL] = r_rw1_mci_val;
                    c_rd_data[`RANGE_MCI_RDWN] = r_rw1_mci_rdwn;
                    c_rd_data[`RANGE_MCI_BE] = r_rw4_mci_be;
                end
                `ADDR_GMAC_CFG5: begin
                    c_rd_data[`RANGE_MCI_ACK] = r_ro1_mci_ack;
                    c_rd_data[`RANGE_MCI_INTR] = r_ro1_mci_intr;
                end
                `ADDR_GMAC_CFG6: begin
                    c_rd_data[`RANGE_MCI_RDATA] = r_ro16_mci_rdata;
                end
                `ADDR_GMAC_CFG7: begin
                    c_rd_data[`RANGE_MCI_RDATA_EXT_1] = r_ro16_mci_rdata_ext_1;
                end
                `ADDR_GMAC_CFG_OWNER: begin
                    c_rd_data[`RANGE_MCI_OWNER] = r_rw1_mci_owner;
                end

            endcase
        end 
    end           
   
    assign o_cfg_rd_data = c_rd_data;
    
    assign           o_soft_pcs_rst = r_rw1_soft_pcs_rst;
    assign           o_soft_tx_rst = r_rw1_soft_tx_rst;
    assign           o_soft_rx_rst = r_rw1_soft_rx_rst;
    assign           o_rw_scratch = r_rw16_rw_scratch;
    assign           o_tx_x1_mode_en = r_rw1_tx_x1_mode_en;
    assign           o_rx_x1_mode_en = r_rw1_rx_x1_mode_en;
    assign           o_tx_rs_en = r_rw1_tx_rs_en;
    assign           o_rx_rs_en = r_rw1_rx_rs_en;
    assign           r_ro1_comma_aligned_l0 = i_comma_aligned_l0;
    assign           r_ro1_comma_aligned_l1 = i_comma_aligned_l1;
    assign           r_ro1_comma_aligned_l2 = i_comma_aligned_l2;
    assign           r_ro1_comma_aligned_l3 = i_comma_aligned_l3;
    assign           r_ro1_disp_err_l0 = i_disp_err_l0;
    assign           r_ro1_disp_err_l1 = i_disp_err_l1;
    assign           r_ro1_disp_err_l2 = i_disp_err_l2;
    assign           r_ro1_disp_err_l3 = i_disp_err_l3;
    assign           o_rxld_half_thres = r_rw5_rxld_half_thres;
    assign           o_rxld_align_det_thres = r_rw8_rxld_align_det_thres;
    assign           o_rxld_align_los_thres = r_rw8_rxld_align_los_thres;
    assign           r_ro1_rxld_overflow_l0 = i_rxld_overflow_l0;
    assign           r_ro1_rxld_overflow_l1 = i_rxld_overflow_l1;
    assign           r_ro1_rxld_overflow_l2 = i_rxld_overflow_l2;
    assign           r_ro1_rxld_overflow_l3 = i_rxld_overflow_l3;
    assign           r_ro1_rxld_underflow_l0 = i_rxld_underflow_l0;
    assign           r_ro1_rxld_underflow_l1 = i_rxld_underflow_l1;
    assign           r_ro1_rxld_underflow_l2 = i_rxld_underflow_l2;
    assign           r_ro1_rxld_underflow_l3 = i_rxld_underflow_l3;
    assign           r_ro1_rxld_aligned = i_rxld_aligned;
    assign           r_ro1_rs_fail_l0 = i_rs_fail_l0;
    assign           r_ro1_rs_fail_l1 = i_rs_fail_l1;
    assign           r_ro1_rs_fail_l2 = i_rs_fail_l2;
    assign           r_ro1_rs_fail_l3 = i_rs_fail_l3;
    assign           r_ro1_rs_found_l0 = i_rs_found_l0;
    assign           r_ro1_rs_found_l1 = i_rs_found_l1;
    assign           r_ro1_rs_found_l2 = i_rs_found_l2;
    assign           r_ro1_rs_found_l3 = i_rs_found_l3;
    assign           r_ro16_rs_fail_cnt_l0 = i_rs_fail_cnt_l0;
    assign           r_ro16_rs_fail_cnt_l1 = i_rs_fail_cnt_l1;
    assign           r_ro16_rs_fail_cnt_l2 = i_rs_fail_cnt_l2;
    assign           r_ro16_rs_fail_cnt_l3 = i_rs_fail_cnt_l3;
    assign           r_ro16_rs_err_num_cnt_l0 = i_rs_err_num_cnt_l0;
    assign           r_ro16_rs_err_num_cnt_l1 = i_rs_err_num_cnt_l1;
    assign           r_ro16_rs_err_num_cnt_l2 = i_rs_err_num_cnt_l2;
    assign           r_ro16_rs_err_num_cnt_l3 = i_rs_err_num_cnt_l3;
    assign           o_manchest_en = r_rw1_manchest_en;
    assign           o_pol_adj_en = r_rw1_pol_adj_en;
    assign           o_pol_cont_adj = r_rw1_pol_cont_adj;
    assign           o_pol_ow_l0 = r_rw1_pol_ow_l0;
    assign           o_pol_ow_l1 = r_rw1_pol_ow_l1;
    assign           o_pol_ow_l2 = r_rw1_pol_ow_l2;
    assign           o_pol_ow_l3 = r_rw1_pol_ow_l3;
    assign           o_pol_ow_val_l0 = r_rw1_pol_ow_val_l0;
    assign           o_pol_ow_val_l1 = r_rw1_pol_ow_val_l1;
    assign           o_pol_ow_val_l2 = r_rw1_pol_ow_val_l2;
    assign           o_pol_ow_val_l3 = r_rw1_pol_ow_val_l3;
    assign           r_ro1_rxpol_done_l0 = i_rxpol_done_l0;
    assign           r_ro1_rxpol_done_l1 = i_rxpol_done_l1;
    assign           r_ro1_rxpol_done_l2 = i_rxpol_done_l2;
    assign           r_ro1_rxpol_done_l3 = i_rxpol_done_l3;
    assign           r_ro1_rxpol_status_l0 = i_rxpol_status_l0;
    assign           r_ro1_rxpol_status_l1 = i_rxpol_status_l1;
    assign           r_ro1_rxpol_status_l2 = i_rxpol_status_l2;
    assign           r_ro1_rxpol_status_l3 = i_rxpol_status_l3;
    assign           o_speed_sel_ow = r_rw1_speed_sel_ow;
    assign           o_speed_sel = r_rw1_speed_sel;
    assign           o_mci_addr = r_rw14_mci_addr;
    assign           o_mci_val = r_rw1_mci_val;
    assign           o_mci_rdwn = r_rw1_mci_rdwn;
    assign           o_mci_be = r_rw4_mci_be;
    assign           r_ro1_mci_ack = i_mci_ack;
    assign           r_ro1_mci_intr = i_mci_intr;
    assign           o_mci_owner = r_rw1_mci_owner;

        
        
    RDSTALL # (
        .SIG_ADDR (`ADDR_RX_DEC_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_disp_err_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_disp_err_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RX_DEC_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_disp_err_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_disp_err_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RX_DEC_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_disp_err_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_disp_err_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RX_DEC_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_disp_err_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_disp_err_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_overflow_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_overflow_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_overflow_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_overflow_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_overflow_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_overflow_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_overflow_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_overflow_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_underflow_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_underflow_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_underflow_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_underflow_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_underflow_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_underflow_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RXLD_STAT),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rxld_underflow_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rxld_underflow_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_found_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_found_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_found_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_found_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_found_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_found_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_STATUS),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_found_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_found_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_FAIL_CNT_L0),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_cnt_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_cnt_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_FAIL_CNT_L1),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_cnt_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_cnt_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_FAIL_CNT_L2),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_cnt_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_cnt_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_FAIL_CNT_L3),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_fail_cnt_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_fail_cnt_l3_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_COR_NUM_CNT_L0),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_err_num_cnt_l0(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_err_num_cnt_l0_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_COR_NUM_CNT_L1),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_err_num_cnt_l1(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_err_num_cnt_l1_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_COR_NUM_CNT_L2),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_err_num_cnt_l2(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_err_num_cnt_l2_clr)
    );
    
    RDSTALL # (
        .SIG_ADDR (`ADDR_RS_COR_NUM_CNT_L3),
        .ADDR_WIDTH (AWIDTH)
    )m_rdstall_rs_err_num_cnt_l3(
        .i_clk       (i_cfg_clk),                         
        .i_rst_n     (i_cfg_rst_n),                          
        .i_addr      (i_cfg_addr),         
        .i_wr_en     (i_cfg_wr_en), 
        .o_signal_clr(o_rs_err_num_cnt_l3_clr)
    );
    
   assign o_mci_wdata = {r_rw16_mci_wdata_ext_1,r_rw16_mci_wdata};
   assign {r_ro16_mci_rdata_ext_1,r_ro16_mci_rdata} = i_mci_rdata;

    
    
    
endmodule
    
    
    
