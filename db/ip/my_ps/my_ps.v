// my_ps.v

// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module my_ps (
		input  wire        clk_clk,                                   //                                   clk.clk
		output wire        eth_tse_0_mac_mdio_connection_mdc,         //         eth_tse_0_mac_mdio_connection.mdc
		input  wire        eth_tse_0_mac_mdio_connection_mdio_in,     //                                      .mdio_in
		output wire        eth_tse_0_mac_mdio_connection_mdio_out,    //                                      .mdio_out
		output wire        eth_tse_0_mac_mdio_connection_mdio_oen,    //                                      .mdio_oen
		input  wire [3:0]  eth_tse_0_mac_mii_connection_mii_rx_d,     //          eth_tse_0_mac_mii_connection.mii_rx_d
		input  wire        eth_tse_0_mac_mii_connection_mii_rx_dv,    //                                      .mii_rx_dv
		input  wire        eth_tse_0_mac_mii_connection_mii_rx_err,   //                                      .mii_rx_err
		output wire [3:0]  eth_tse_0_mac_mii_connection_mii_tx_d,     //                                      .mii_tx_d
		output wire        eth_tse_0_mac_mii_connection_mii_tx_en,    //                                      .mii_tx_en
		output wire        eth_tse_0_mac_mii_connection_mii_tx_err,   //                                      .mii_tx_err
		input  wire        eth_tse_0_mac_mii_connection_mii_crs,      //                                      .mii_crs
		input  wire        eth_tse_0_mac_mii_connection_mii_col,      //                                      .mii_col
		input  wire        eth_tse_0_mac_status_connection_set_10,    //       eth_tse_0_mac_status_connection.set_10
		input  wire        eth_tse_0_mac_status_connection_set_1000,  //                                      .set_1000
		output wire        eth_tse_0_mac_status_connection_eth_mode,  //                                      .eth_mode
		output wire        eth_tse_0_mac_status_connection_ena_10,    //                                      .ena_10
		input  wire        eth_tse_0_pcs_mac_rx_clock_connection_clk, // eth_tse_0_pcs_mac_rx_clock_connection.clk
		input  wire        eth_tse_0_pcs_mac_tx_clock_connection_clk, // eth_tse_0_pcs_mac_tx_clock_connection.clk
		output wire [1:0]  pio_0_external_connection_export,          //             pio_0_external_connection.export
		input  wire        reset_reset_n,                             //                                 reset.reset_n
		input  wire [31:0] rx_fifo_in_data,                           //                            rx_fifo_in.data
		input  wire        rx_fifo_in_valid,                          //                                      .valid
		output wire        rx_fifo_in_ready,                          //                                      .ready
		input  wire        rx_fifo_in_startofpacket,                  //                                      .startofpacket
		input  wire        rx_fifo_in_endofpacket,                    //                                      .endofpacket
		input  wire [1:0]  rx_fifo_in_empty,                          //                                      .empty
		input  wire        rx_fifo_in_clk_clk,                        //                        rx_fifo_in_clk.clk
		input  wire        rx_fifo_in_clk_reset_reset_n,              //                  rx_fifo_in_clk_reset.reset_n
		output wire [31:0] tx_fifo_out_data,                          //                           tx_fifo_out.data
		output wire        tx_fifo_out_valid,                         //                                      .valid
		input  wire        tx_fifo_out_ready,                         //                                      .ready
		output wire        tx_fifo_out_startofpacket,                 //                                      .startofpacket
		output wire        tx_fifo_out_endofpacket,                   //                                      .endofpacket
		output wire [1:0]  tx_fifo_out_empty,                         //                                      .empty
		input  wire        tx_fifo_out_clk_clk,                       //                       tx_fifo_out_clk.clk
		input  wire        tx_fifo_out_clk_reset_reset_n              //                 tx_fifo_out_clk_reset.reset_n
	);

	wire         sgdma_tx_pcs_out_valid;                                      // sgdma_tx_pcs:out_valid -> tx_fifo:in_valid
	wire  [31:0] sgdma_tx_pcs_out_data;                                       // sgdma_tx_pcs:out_data -> tx_fifo:in_data
	wire         sgdma_tx_pcs_out_ready;                                      // tx_fifo:in_ready -> sgdma_tx_pcs:out_ready
	wire         sgdma_tx_pcs_out_startofpacket;                              // sgdma_tx_pcs:out_startofpacket -> tx_fifo:in_startofpacket
	wire         sgdma_tx_pcs_out_endofpacket;                                // sgdma_tx_pcs:out_endofpacket -> tx_fifo:in_endofpacket
	wire   [1:0] sgdma_tx_pcs_out_empty;                                      // sgdma_tx_pcs:out_empty -> tx_fifo:in_empty
	wire         rx_fifo_out_valid;                                           // rx_fifo:out_valid -> sgdma_rx_pcs:in_valid
	wire  [31:0] rx_fifo_out_data;                                            // rx_fifo:out_data -> sgdma_rx_pcs:in_data
	wire         rx_fifo_out_ready;                                           // sgdma_rx_pcs:in_ready -> rx_fifo:out_ready
	wire         rx_fifo_out_startofpacket;                                   // rx_fifo:out_startofpacket -> sgdma_rx_pcs:in_startofpacket
	wire         rx_fifo_out_endofpacket;                                     // rx_fifo:out_endofpacket -> sgdma_rx_pcs:in_endofpacket
	wire   [1:0] rx_fifo_out_empty;                                           // rx_fifo:out_empty -> sgdma_rx_pcs:in_empty
	wire  [31:0] nios2_gen2_0_data_master_readdata;                           // mm_interconnect_0:nios2_gen2_0_data_master_readdata -> nios2_gen2_0:d_readdata
	wire         nios2_gen2_0_data_master_waitrequest;                        // mm_interconnect_0:nios2_gen2_0_data_master_waitrequest -> nios2_gen2_0:d_waitrequest
	wire         nios2_gen2_0_data_master_debugaccess;                        // nios2_gen2_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:nios2_gen2_0_data_master_debugaccess
	wire  [16:0] nios2_gen2_0_data_master_address;                            // nios2_gen2_0:d_address -> mm_interconnect_0:nios2_gen2_0_data_master_address
	wire   [3:0] nios2_gen2_0_data_master_byteenable;                         // nios2_gen2_0:d_byteenable -> mm_interconnect_0:nios2_gen2_0_data_master_byteenable
	wire         nios2_gen2_0_data_master_read;                               // nios2_gen2_0:d_read -> mm_interconnect_0:nios2_gen2_0_data_master_read
	wire         nios2_gen2_0_data_master_write;                              // nios2_gen2_0:d_write -> mm_interconnect_0:nios2_gen2_0_data_master_write
	wire  [31:0] nios2_gen2_0_data_master_writedata;                          // nios2_gen2_0:d_writedata -> mm_interconnect_0:nios2_gen2_0_data_master_writedata
	wire  [31:0] sgdma_tx_pcs_descriptor_read_readdata;                       // mm_interconnect_0:sgdma_tx_pcs_descriptor_read_readdata -> sgdma_tx_pcs:descriptor_read_readdata
	wire         sgdma_tx_pcs_descriptor_read_waitrequest;                    // mm_interconnect_0:sgdma_tx_pcs_descriptor_read_waitrequest -> sgdma_tx_pcs:descriptor_read_waitrequest
	wire  [31:0] sgdma_tx_pcs_descriptor_read_address;                        // sgdma_tx_pcs:descriptor_read_address -> mm_interconnect_0:sgdma_tx_pcs_descriptor_read_address
	wire         sgdma_tx_pcs_descriptor_read_read;                           // sgdma_tx_pcs:descriptor_read_read -> mm_interconnect_0:sgdma_tx_pcs_descriptor_read_read
	wire         sgdma_tx_pcs_descriptor_read_readdatavalid;                  // mm_interconnect_0:sgdma_tx_pcs_descriptor_read_readdatavalid -> sgdma_tx_pcs:descriptor_read_readdatavalid
	wire  [31:0] sgdma_rx_pcs_descriptor_read_readdata;                       // mm_interconnect_0:sgdma_rx_pcs_descriptor_read_readdata -> sgdma_rx_pcs:descriptor_read_readdata
	wire         sgdma_rx_pcs_descriptor_read_waitrequest;                    // mm_interconnect_0:sgdma_rx_pcs_descriptor_read_waitrequest -> sgdma_rx_pcs:descriptor_read_waitrequest
	wire  [31:0] sgdma_rx_pcs_descriptor_read_address;                        // sgdma_rx_pcs:descriptor_read_address -> mm_interconnect_0:sgdma_rx_pcs_descriptor_read_address
	wire         sgdma_rx_pcs_descriptor_read_read;                           // sgdma_rx_pcs:descriptor_read_read -> mm_interconnect_0:sgdma_rx_pcs_descriptor_read_read
	wire         sgdma_rx_pcs_descriptor_read_readdatavalid;                  // mm_interconnect_0:sgdma_rx_pcs_descriptor_read_readdatavalid -> sgdma_rx_pcs:descriptor_read_readdatavalid
	wire         sgdma_tx_pcs_descriptor_write_waitrequest;                   // mm_interconnect_0:sgdma_tx_pcs_descriptor_write_waitrequest -> sgdma_tx_pcs:descriptor_write_waitrequest
	wire  [31:0] sgdma_tx_pcs_descriptor_write_address;                       // sgdma_tx_pcs:descriptor_write_address -> mm_interconnect_0:sgdma_tx_pcs_descriptor_write_address
	wire         sgdma_tx_pcs_descriptor_write_write;                         // sgdma_tx_pcs:descriptor_write_write -> mm_interconnect_0:sgdma_tx_pcs_descriptor_write_write
	wire  [31:0] sgdma_tx_pcs_descriptor_write_writedata;                     // sgdma_tx_pcs:descriptor_write_writedata -> mm_interconnect_0:sgdma_tx_pcs_descriptor_write_writedata
	wire         sgdma_rx_pcs_descriptor_write_waitrequest;                   // mm_interconnect_0:sgdma_rx_pcs_descriptor_write_waitrequest -> sgdma_rx_pcs:descriptor_write_waitrequest
	wire  [31:0] sgdma_rx_pcs_descriptor_write_address;                       // sgdma_rx_pcs:descriptor_write_address -> mm_interconnect_0:sgdma_rx_pcs_descriptor_write_address
	wire         sgdma_rx_pcs_descriptor_write_write;                         // sgdma_rx_pcs:descriptor_write_write -> mm_interconnect_0:sgdma_rx_pcs_descriptor_write_write
	wire  [31:0] sgdma_rx_pcs_descriptor_write_writedata;                     // sgdma_rx_pcs:descriptor_write_writedata -> mm_interconnect_0:sgdma_rx_pcs_descriptor_write_writedata
	wire  [31:0] sgdma_rx_descriptor_read_readdata;                           // mm_interconnect_0:sgdma_rx_descriptor_read_readdata -> sgdma_rx:descriptor_read_readdata
	wire         sgdma_rx_descriptor_read_waitrequest;                        // mm_interconnect_0:sgdma_rx_descriptor_read_waitrequest -> sgdma_rx:descriptor_read_waitrequest
	wire  [31:0] sgdma_rx_descriptor_read_address;                            // sgdma_rx:descriptor_read_address -> mm_interconnect_0:sgdma_rx_descriptor_read_address
	wire         sgdma_rx_descriptor_read_read;                               // sgdma_rx:descriptor_read_read -> mm_interconnect_0:sgdma_rx_descriptor_read_read
	wire         sgdma_rx_descriptor_read_readdatavalid;                      // mm_interconnect_0:sgdma_rx_descriptor_read_readdatavalid -> sgdma_rx:descriptor_read_readdatavalid
	wire  [31:0] sgdma_tx_descriptor_read_readdata;                           // mm_interconnect_0:sgdma_tx_descriptor_read_readdata -> sgdma_tx:descriptor_read_readdata
	wire         sgdma_tx_descriptor_read_waitrequest;                        // mm_interconnect_0:sgdma_tx_descriptor_read_waitrequest -> sgdma_tx:descriptor_read_waitrequest
	wire  [31:0] sgdma_tx_descriptor_read_address;                            // sgdma_tx:descriptor_read_address -> mm_interconnect_0:sgdma_tx_descriptor_read_address
	wire         sgdma_tx_descriptor_read_read;                               // sgdma_tx:descriptor_read_read -> mm_interconnect_0:sgdma_tx_descriptor_read_read
	wire         sgdma_tx_descriptor_read_readdatavalid;                      // mm_interconnect_0:sgdma_tx_descriptor_read_readdatavalid -> sgdma_tx:descriptor_read_readdatavalid
	wire         sgdma_rx_descriptor_write_waitrequest;                       // mm_interconnect_0:sgdma_rx_descriptor_write_waitrequest -> sgdma_rx:descriptor_write_waitrequest
	wire  [31:0] sgdma_rx_descriptor_write_address;                           // sgdma_rx:descriptor_write_address -> mm_interconnect_0:sgdma_rx_descriptor_write_address
	wire         sgdma_rx_descriptor_write_write;                             // sgdma_rx:descriptor_write_write -> mm_interconnect_0:sgdma_rx_descriptor_write_write
	wire  [31:0] sgdma_rx_descriptor_write_writedata;                         // sgdma_rx:descriptor_write_writedata -> mm_interconnect_0:sgdma_rx_descriptor_write_writedata
	wire         sgdma_tx_descriptor_write_waitrequest;                       // mm_interconnect_0:sgdma_tx_descriptor_write_waitrequest -> sgdma_tx:descriptor_write_waitrequest
	wire  [31:0] sgdma_tx_descriptor_write_address;                           // sgdma_tx:descriptor_write_address -> mm_interconnect_0:sgdma_tx_descriptor_write_address
	wire         sgdma_tx_descriptor_write_write;                             // sgdma_tx:descriptor_write_write -> mm_interconnect_0:sgdma_tx_descriptor_write_write
	wire  [31:0] sgdma_tx_descriptor_write_writedata;                         // sgdma_tx:descriptor_write_writedata -> mm_interconnect_0:sgdma_tx_descriptor_write_writedata
	wire  [31:0] nios2_gen2_0_instruction_master_readdata;                    // mm_interconnect_0:nios2_gen2_0_instruction_master_readdata -> nios2_gen2_0:i_readdata
	wire         nios2_gen2_0_instruction_master_waitrequest;                 // mm_interconnect_0:nios2_gen2_0_instruction_master_waitrequest -> nios2_gen2_0:i_waitrequest
	wire  [16:0] nios2_gen2_0_instruction_master_address;                     // nios2_gen2_0:i_address -> mm_interconnect_0:nios2_gen2_0_instruction_master_address
	wire         nios2_gen2_0_instruction_master_read;                        // nios2_gen2_0:i_read -> mm_interconnect_0:nios2_gen2_0_instruction_master_read
	wire  [31:0] sgdma_tx_m_read_readdata;                                    // mm_interconnect_0:sgdma_tx_m_read_readdata -> sgdma_tx:m_read_readdata
	wire         sgdma_tx_m_read_waitrequest;                                 // mm_interconnect_0:sgdma_tx_m_read_waitrequest -> sgdma_tx:m_read_waitrequest
	wire  [31:0] sgdma_tx_m_read_address;                                     // sgdma_tx:m_read_address -> mm_interconnect_0:sgdma_tx_m_read_address
	wire         sgdma_tx_m_read_read;                                        // sgdma_tx:m_read_read -> mm_interconnect_0:sgdma_tx_m_read_read
	wire         sgdma_tx_m_read_readdatavalid;                               // mm_interconnect_0:sgdma_tx_m_read_readdatavalid -> sgdma_tx:m_read_readdatavalid
	wire  [31:0] sgdma_tx_pcs_m_read_readdata;                                // mm_interconnect_0:sgdma_tx_pcs_m_read_readdata -> sgdma_tx_pcs:m_read_readdata
	wire         sgdma_tx_pcs_m_read_waitrequest;                             // mm_interconnect_0:sgdma_tx_pcs_m_read_waitrequest -> sgdma_tx_pcs:m_read_waitrequest
	wire  [31:0] sgdma_tx_pcs_m_read_address;                                 // sgdma_tx_pcs:m_read_address -> mm_interconnect_0:sgdma_tx_pcs_m_read_address
	wire         sgdma_tx_pcs_m_read_read;                                    // sgdma_tx_pcs:m_read_read -> mm_interconnect_0:sgdma_tx_pcs_m_read_read
	wire         sgdma_tx_pcs_m_read_readdatavalid;                           // mm_interconnect_0:sgdma_tx_pcs_m_read_readdatavalid -> sgdma_tx_pcs:m_read_readdatavalid
	wire         sgdma_rx_m_write_waitrequest;                                // mm_interconnect_0:sgdma_rx_m_write_waitrequest -> sgdma_rx:m_write_waitrequest
	wire  [31:0] sgdma_rx_m_write_address;                                    // sgdma_rx:m_write_address -> mm_interconnect_0:sgdma_rx_m_write_address
	wire   [3:0] sgdma_rx_m_write_byteenable;                                 // sgdma_rx:m_write_byteenable -> mm_interconnect_0:sgdma_rx_m_write_byteenable
	wire         sgdma_rx_m_write_write;                                      // sgdma_rx:m_write_write -> mm_interconnect_0:sgdma_rx_m_write_write
	wire  [31:0] sgdma_rx_m_write_writedata;                                  // sgdma_rx:m_write_writedata -> mm_interconnect_0:sgdma_rx_m_write_writedata
	wire         sgdma_rx_pcs_m_write_waitrequest;                            // mm_interconnect_0:sgdma_rx_pcs_m_write_waitrequest -> sgdma_rx_pcs:m_write_waitrequest
	wire  [31:0] sgdma_rx_pcs_m_write_address;                                // sgdma_rx_pcs:m_write_address -> mm_interconnect_0:sgdma_rx_pcs_m_write_address
	wire   [3:0] sgdma_rx_pcs_m_write_byteenable;                             // sgdma_rx_pcs:m_write_byteenable -> mm_interconnect_0:sgdma_rx_pcs_m_write_byteenable
	wire         sgdma_rx_pcs_m_write_write;                                  // sgdma_rx_pcs:m_write_write -> mm_interconnect_0:sgdma_rx_pcs_m_write_write
	wire  [31:0] sgdma_rx_pcs_m_write_writedata;                              // sgdma_rx_pcs:m_write_writedata -> mm_interconnect_0:sgdma_rx_pcs_m_write_writedata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;    // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest; // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire  [31:0] mm_interconnect_0_eth_tse_0_control_port_readdata;           // eth_tse_0:reg_data_out -> mm_interconnect_0:eth_tse_0_control_port_readdata
	wire         mm_interconnect_0_eth_tse_0_control_port_waitrequest;        // eth_tse_0:reg_busy -> mm_interconnect_0:eth_tse_0_control_port_waitrequest
	wire   [7:0] mm_interconnect_0_eth_tse_0_control_port_address;            // mm_interconnect_0:eth_tse_0_control_port_address -> eth_tse_0:reg_addr
	wire         mm_interconnect_0_eth_tse_0_control_port_read;               // mm_interconnect_0:eth_tse_0_control_port_read -> eth_tse_0:reg_rd
	wire         mm_interconnect_0_eth_tse_0_control_port_write;              // mm_interconnect_0:eth_tse_0_control_port_write -> eth_tse_0:reg_wr
	wire  [31:0] mm_interconnect_0_eth_tse_0_control_port_writedata;          // mm_interconnect_0:eth_tse_0_control_port_writedata -> eth_tse_0:reg_data_in
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;       // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;        // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_sgdma_rx_csr_chipselect;                   // mm_interconnect_0:sgdma_rx_csr_chipselect -> sgdma_rx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_readdata;                     // sgdma_rx:csr_readdata -> mm_interconnect_0:sgdma_rx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_rx_csr_address;                      // mm_interconnect_0:sgdma_rx_csr_address -> sgdma_rx:csr_address
	wire         mm_interconnect_0_sgdma_rx_csr_read;                         // mm_interconnect_0:sgdma_rx_csr_read -> sgdma_rx:csr_read
	wire         mm_interconnect_0_sgdma_rx_csr_write;                        // mm_interconnect_0:sgdma_rx_csr_write -> sgdma_rx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_rx_csr_writedata;                    // mm_interconnect_0:sgdma_rx_csr_writedata -> sgdma_rx:csr_writedata
	wire         mm_interconnect_0_sgdma_tx_csr_chipselect;                   // mm_interconnect_0:sgdma_tx_csr_chipselect -> sgdma_tx:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_readdata;                     // sgdma_tx:csr_readdata -> mm_interconnect_0:sgdma_tx_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_tx_csr_address;                      // mm_interconnect_0:sgdma_tx_csr_address -> sgdma_tx:csr_address
	wire         mm_interconnect_0_sgdma_tx_csr_read;                         // mm_interconnect_0:sgdma_tx_csr_read -> sgdma_tx:csr_read
	wire         mm_interconnect_0_sgdma_tx_csr_write;                        // mm_interconnect_0:sgdma_tx_csr_write -> sgdma_tx:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_tx_csr_writedata;                    // mm_interconnect_0:sgdma_tx_csr_writedata -> sgdma_tx:csr_writedata
	wire         mm_interconnect_0_sgdma_rx_pcs_csr_chipselect;               // mm_interconnect_0:sgdma_rx_pcs_csr_chipselect -> sgdma_rx_pcs:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_rx_pcs_csr_readdata;                 // sgdma_rx_pcs:csr_readdata -> mm_interconnect_0:sgdma_rx_pcs_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_rx_pcs_csr_address;                  // mm_interconnect_0:sgdma_rx_pcs_csr_address -> sgdma_rx_pcs:csr_address
	wire         mm_interconnect_0_sgdma_rx_pcs_csr_read;                     // mm_interconnect_0:sgdma_rx_pcs_csr_read -> sgdma_rx_pcs:csr_read
	wire         mm_interconnect_0_sgdma_rx_pcs_csr_write;                    // mm_interconnect_0:sgdma_rx_pcs_csr_write -> sgdma_rx_pcs:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_rx_pcs_csr_writedata;                // mm_interconnect_0:sgdma_rx_pcs_csr_writedata -> sgdma_rx_pcs:csr_writedata
	wire         mm_interconnect_0_sgdma_tx_pcs_csr_chipselect;               // mm_interconnect_0:sgdma_tx_pcs_csr_chipselect -> sgdma_tx_pcs:csr_chipselect
	wire  [31:0] mm_interconnect_0_sgdma_tx_pcs_csr_readdata;                 // sgdma_tx_pcs:csr_readdata -> mm_interconnect_0:sgdma_tx_pcs_csr_readdata
	wire   [3:0] mm_interconnect_0_sgdma_tx_pcs_csr_address;                  // mm_interconnect_0:sgdma_tx_pcs_csr_address -> sgdma_tx_pcs:csr_address
	wire         mm_interconnect_0_sgdma_tx_pcs_csr_read;                     // mm_interconnect_0:sgdma_tx_pcs_csr_read -> sgdma_tx_pcs:csr_read
	wire         mm_interconnect_0_sgdma_tx_pcs_csr_write;                    // mm_interconnect_0:sgdma_tx_pcs_csr_write -> sgdma_tx_pcs:csr_write
	wire  [31:0] mm_interconnect_0_sgdma_tx_pcs_csr_writedata;                // mm_interconnect_0:sgdma_tx_pcs_csr_writedata -> sgdma_tx_pcs:csr_writedata
	wire  [31:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata;     // nios2_gen2_0:debug_mem_slave_readdata -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_readdata
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest;  // nios2_gen2_0:debug_mem_slave_waitrequest -> mm_interconnect_0:nios2_gen2_0_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess;  // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_debugaccess -> nios2_gen2_0:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address;      // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_address -> nios2_gen2_0:debug_mem_slave_address
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read;         // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_read -> nios2_gen2_0:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable;   // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_byteenable -> nios2_gen2_0:debug_mem_slave_byteenable
	wire         mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write;        // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_write -> nios2_gen2_0:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata;    // mm_interconnect_0:nios2_gen2_0_debug_mem_slave_writedata -> nios2_gen2_0:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;            // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;              // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire  [12:0] mm_interconnect_0_onchip_memory2_0_s1_address;               // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;            // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;                 // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;             // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;                 // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         mm_interconnect_0_descriptor_mem_s1_chipselect;              // mm_interconnect_0:descriptor_mem_s1_chipselect -> descriptor_mem:chipselect
	wire  [31:0] mm_interconnect_0_descriptor_mem_s1_readdata;                // descriptor_mem:readdata -> mm_interconnect_0:descriptor_mem_s1_readdata
	wire   [4:0] mm_interconnect_0_descriptor_mem_s1_address;                 // mm_interconnect_0:descriptor_mem_s1_address -> descriptor_mem:address
	wire   [3:0] mm_interconnect_0_descriptor_mem_s1_byteenable;              // mm_interconnect_0:descriptor_mem_s1_byteenable -> descriptor_mem:byteenable
	wire         mm_interconnect_0_descriptor_mem_s1_write;                   // mm_interconnect_0:descriptor_mem_s1_write -> descriptor_mem:write
	wire  [31:0] mm_interconnect_0_descriptor_mem_s1_writedata;               // mm_interconnect_0:descriptor_mem_s1_writedata -> descriptor_mem:writedata
	wire         mm_interconnect_0_descriptor_mem_s1_clken;                   // mm_interconnect_0:descriptor_mem_s1_clken -> descriptor_mem:clken
	wire         mm_interconnect_0_descriptor_mem_pcs_s1_chipselect;          // mm_interconnect_0:descriptor_mem_pcs_s1_chipselect -> descriptor_mem_pcs:chipselect
	wire  [31:0] mm_interconnect_0_descriptor_mem_pcs_s1_readdata;            // descriptor_mem_pcs:readdata -> mm_interconnect_0:descriptor_mem_pcs_s1_readdata
	wire   [4:0] mm_interconnect_0_descriptor_mem_pcs_s1_address;             // mm_interconnect_0:descriptor_mem_pcs_s1_address -> descriptor_mem_pcs:address
	wire   [3:0] mm_interconnect_0_descriptor_mem_pcs_s1_byteenable;          // mm_interconnect_0:descriptor_mem_pcs_s1_byteenable -> descriptor_mem_pcs:byteenable
	wire         mm_interconnect_0_descriptor_mem_pcs_s1_write;               // mm_interconnect_0:descriptor_mem_pcs_s1_write -> descriptor_mem_pcs:write
	wire  [31:0] mm_interconnect_0_descriptor_mem_pcs_s1_writedata;           // mm_interconnect_0:descriptor_mem_pcs_s1_writedata -> descriptor_mem_pcs:writedata
	wire         mm_interconnect_0_descriptor_mem_pcs_s1_clken;               // mm_interconnect_0:descriptor_mem_pcs_s1_clken -> descriptor_mem_pcs:clken
	wire         mm_interconnect_0_pio_0_s1_chipselect;                       // mm_interconnect_0:pio_0_s1_chipselect -> pio_0:chipselect
	wire  [31:0] mm_interconnect_0_pio_0_s1_readdata;                         // pio_0:readdata -> mm_interconnect_0:pio_0_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_0_s1_address;                          // mm_interconnect_0:pio_0_s1_address -> pio_0:address
	wire         mm_interconnect_0_pio_0_s1_write;                            // mm_interconnect_0:pio_0_s1_write -> pio_0:write_n
	wire  [31:0] mm_interconnect_0_pio_0_s1_writedata;                        // mm_interconnect_0:pio_0_s1_writedata -> pio_0:writedata
	wire         mm_interconnect_0_timer_0_s1_chipselect;                     // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                       // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                        // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                          // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                      // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         irq_mapper_receiver0_irq;                                    // sgdma_rx:csr_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                    // sgdma_tx:csr_irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                    // sgdma_rx_pcs:csr_irq -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                                    // sgdma_tx_pcs:csr_irq -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                                    // jtag_uart_0:av_irq -> irq_mapper:receiver4_irq
	wire         irq_mapper_receiver5_irq;                                    // timer_0:irq -> irq_mapper:receiver5_irq
	wire  [31:0] nios2_gen2_0_irq_irq;                                        // irq_mapper:sender_irq -> nios2_gen2_0:irq
	wire         sgdma_tx_out_valid;                                          // sgdma_tx:out_valid -> avalon_st_adapter:in_0_valid
	wire  [31:0] sgdma_tx_out_data;                                           // sgdma_tx:out_data -> avalon_st_adapter:in_0_data
	wire         sgdma_tx_out_ready;                                          // avalon_st_adapter:in_0_ready -> sgdma_tx:out_ready
	wire         sgdma_tx_out_startofpacket;                                  // sgdma_tx:out_startofpacket -> avalon_st_adapter:in_0_startofpacket
	wire         sgdma_tx_out_endofpacket;                                    // sgdma_tx:out_endofpacket -> avalon_st_adapter:in_0_endofpacket
	wire   [1:0] sgdma_tx_out_empty;                                          // sgdma_tx:out_empty -> avalon_st_adapter:in_0_empty
	wire         avalon_st_adapter_out_0_valid;                               // avalon_st_adapter:out_0_valid -> eth_tse_0:ff_tx_wren
	wire  [31:0] avalon_st_adapter_out_0_data;                                // avalon_st_adapter:out_0_data -> eth_tse_0:ff_tx_data
	wire         avalon_st_adapter_out_0_ready;                               // eth_tse_0:ff_tx_rdy -> avalon_st_adapter:out_0_ready
	wire         avalon_st_adapter_out_0_startofpacket;                       // avalon_st_adapter:out_0_startofpacket -> eth_tse_0:ff_tx_sop
	wire         avalon_st_adapter_out_0_endofpacket;                         // avalon_st_adapter:out_0_endofpacket -> eth_tse_0:ff_tx_eop
	wire   [0:0] avalon_st_adapter_out_0_error;                               // avalon_st_adapter:out_0_error -> eth_tse_0:ff_tx_err
	wire   [1:0] avalon_st_adapter_out_0_empty;                               // avalon_st_adapter:out_0_empty -> eth_tse_0:ff_tx_mod
	wire         eth_tse_0_receive_valid;                                     // eth_tse_0:ff_rx_dval -> avalon_st_adapter_001:in_0_valid
	wire  [31:0] eth_tse_0_receive_data;                                      // eth_tse_0:ff_rx_data -> avalon_st_adapter_001:in_0_data
	wire         eth_tse_0_receive_ready;                                     // avalon_st_adapter_001:in_0_ready -> eth_tse_0:ff_rx_rdy
	wire         eth_tse_0_receive_startofpacket;                             // eth_tse_0:ff_rx_sop -> avalon_st_adapter_001:in_0_startofpacket
	wire         eth_tse_0_receive_endofpacket;                               // eth_tse_0:ff_rx_eop -> avalon_st_adapter_001:in_0_endofpacket
	wire   [5:0] eth_tse_0_receive_error;                                     // eth_tse_0:rx_err -> avalon_st_adapter_001:in_0_error
	wire   [1:0] eth_tse_0_receive_empty;                                     // eth_tse_0:ff_rx_mod -> avalon_st_adapter_001:in_0_empty
	wire         avalon_st_adapter_001_out_0_valid;                           // avalon_st_adapter_001:out_0_valid -> sgdma_rx:in_valid
	wire  [31:0] avalon_st_adapter_001_out_0_data;                            // avalon_st_adapter_001:out_0_data -> sgdma_rx:in_data
	wire         avalon_st_adapter_001_out_0_ready;                           // sgdma_rx:in_ready -> avalon_st_adapter_001:out_0_ready
	wire         avalon_st_adapter_001_out_0_startofpacket;                   // avalon_st_adapter_001:out_0_startofpacket -> sgdma_rx:in_startofpacket
	wire         avalon_st_adapter_001_out_0_endofpacket;                     // avalon_st_adapter_001:out_0_endofpacket -> sgdma_rx:in_endofpacket
	wire   [5:0] avalon_st_adapter_001_out_0_error;                           // avalon_st_adapter_001:out_0_error -> sgdma_rx:in_error
	wire   [1:0] avalon_st_adapter_001_out_0_empty;                           // avalon_st_adapter_001:out_0_empty -> sgdma_rx:in_empty
	wire         rst_controller_reset_out_reset;                              // rst_controller:reset_out -> [avalon_st_adapter:in_rst_0_reset, avalon_st_adapter_001:in_rst_0_reset, descriptor_mem:reset, eth_tse_0:reset, irq_mapper:reset, jtag_uart_0:rst_n, mm_interconnect_0:nios2_gen2_0_reset_reset_bridge_in_reset_reset, nios2_gen2_0:reset_n, onchip_memory2_0:reset, rst_translator:in_reset, sgdma_rx:system_reset_n, sgdma_tx:system_reset_n, sysid_qsys_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                          // rst_controller:reset_req -> [descriptor_mem:reset_req, nios2_gen2_0:reset_req, onchip_memory2_0:reset_req, rst_translator:reset_req_in]
	wire         nios2_gen2_0_debug_reset_request_reset;                      // nios2_gen2_0:debug_reset_request -> rst_controller:reset_in1
	wire         rst_controller_001_reset_out_reset;                          // rst_controller_001:reset_out -> [descriptor_mem_pcs:reset, mm_interconnect_0:sgdma_tx_pcs_reset_reset_bridge_in_reset_reset, pio_0:reset_n, rst_translator_001:in_reset, rx_fifo:out_reset_n, sgdma_rx_pcs:system_reset_n, sgdma_tx_pcs:system_reset_n, timer_0:reset_n, tx_fifo:in_reset_n]
	wire         rst_controller_001_reset_out_reset_req;                      // rst_controller_001:reset_req -> [descriptor_mem_pcs:reset_req, rst_translator_001:reset_req_in]

	my_ps_descriptor_mem descriptor_mem (
		.clk        (clk_clk),                                        //   clk1.clk
		.address    (mm_interconnect_0_descriptor_mem_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_descriptor_mem_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_descriptor_mem_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_descriptor_mem_s1_write),      //       .write
		.readdata   (mm_interconnect_0_descriptor_mem_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_descriptor_mem_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_descriptor_mem_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                 // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),             //       .reset_req
		.freeze     (1'b0)                                            // (terminated)
	);

	my_ps_descriptor_mem_pcs descriptor_mem_pcs (
		.clk        (clk_clk),                                            //   clk1.clk
		.address    (mm_interconnect_0_descriptor_mem_pcs_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_descriptor_mem_pcs_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_descriptor_mem_pcs_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_descriptor_mem_pcs_s1_write),      //       .write
		.readdata   (mm_interconnect_0_descriptor_mem_pcs_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_descriptor_mem_pcs_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_descriptor_mem_pcs_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),                 // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req),             //       .reset_req
		.freeze     (1'b0)                                                // (terminated)
	);

	my_ps_eth_tse_0 eth_tse_0 (
		.clk           (clk_clk),                                              // control_port_clock_connection.clk
		.reset         (rst_controller_reset_out_reset),                       //              reset_connection.reset
		.reg_addr      (mm_interconnect_0_eth_tse_0_control_port_address),     //                  control_port.address
		.reg_data_out  (mm_interconnect_0_eth_tse_0_control_port_readdata),    //                              .readdata
		.reg_rd        (mm_interconnect_0_eth_tse_0_control_port_read),        //                              .read
		.reg_data_in   (mm_interconnect_0_eth_tse_0_control_port_writedata),   //                              .writedata
		.reg_wr        (mm_interconnect_0_eth_tse_0_control_port_write),       //                              .write
		.reg_busy      (mm_interconnect_0_eth_tse_0_control_port_waitrequest), //                              .waitrequest
		.tx_clk        (eth_tse_0_pcs_mac_tx_clock_connection_clk),            //   pcs_mac_tx_clock_connection.clk
		.rx_clk        (eth_tse_0_pcs_mac_rx_clock_connection_clk),            //   pcs_mac_rx_clock_connection.clk
		.set_10        (eth_tse_0_mac_status_connection_set_10),               //         mac_status_connection.set_10
		.set_1000      (eth_tse_0_mac_status_connection_set_1000),             //                              .set_1000
		.eth_mode      (eth_tse_0_mac_status_connection_eth_mode),             //                              .eth_mode
		.ena_10        (eth_tse_0_mac_status_connection_ena_10),               //                              .ena_10
		.gm_rx_d       (),                                                     //           mac_gmii_connection.gmii_rx_d
		.gm_rx_dv      (),                                                     //                              .gmii_rx_dv
		.gm_rx_err     (),                                                     //                              .gmii_rx_err
		.gm_tx_d       (),                                                     //                              .gmii_tx_d
		.gm_tx_en      (),                                                     //                              .gmii_tx_en
		.gm_tx_err     (),                                                     //                              .gmii_tx_err
		.m_rx_d        (eth_tse_0_mac_mii_connection_mii_rx_d),                //            mac_mii_connection.mii_rx_d
		.m_rx_en       (eth_tse_0_mac_mii_connection_mii_rx_dv),               //                              .mii_rx_dv
		.m_rx_err      (eth_tse_0_mac_mii_connection_mii_rx_err),              //                              .mii_rx_err
		.m_tx_d        (eth_tse_0_mac_mii_connection_mii_tx_d),                //                              .mii_tx_d
		.m_tx_en       (eth_tse_0_mac_mii_connection_mii_tx_en),               //                              .mii_tx_en
		.m_tx_err      (eth_tse_0_mac_mii_connection_mii_tx_err),              //                              .mii_tx_err
		.m_rx_crs      (eth_tse_0_mac_mii_connection_mii_crs),                 //                              .mii_crs
		.m_rx_col      (eth_tse_0_mac_mii_connection_mii_col),                 //                              .mii_col
		.ff_rx_clk     (clk_clk),                                              //      receive_clock_connection.clk
		.ff_tx_clk     (clk_clk),                                              //     transmit_clock_connection.clk
		.ff_rx_data    (eth_tse_0_receive_data),                               //                       receive.data
		.ff_rx_eop     (eth_tse_0_receive_endofpacket),                        //                              .endofpacket
		.rx_err        (eth_tse_0_receive_error),                              //                              .error
		.ff_rx_mod     (eth_tse_0_receive_empty),                              //                              .empty
		.ff_rx_rdy     (eth_tse_0_receive_ready),                              //                              .ready
		.ff_rx_sop     (eth_tse_0_receive_startofpacket),                      //                              .startofpacket
		.ff_rx_dval    (eth_tse_0_receive_valid),                              //                              .valid
		.ff_tx_data    (avalon_st_adapter_out_0_data),                         //                      transmit.data
		.ff_tx_eop     (avalon_st_adapter_out_0_endofpacket),                  //                              .endofpacket
		.ff_tx_err     (avalon_st_adapter_out_0_error),                        //                              .error
		.ff_tx_mod     (avalon_st_adapter_out_0_empty),                        //                              .empty
		.ff_tx_rdy     (avalon_st_adapter_out_0_ready),                        //                              .ready
		.ff_tx_sop     (avalon_st_adapter_out_0_startofpacket),                //                              .startofpacket
		.ff_tx_wren    (avalon_st_adapter_out_0_valid),                        //                              .valid
		.mdc           (eth_tse_0_mac_mdio_connection_mdc),                    //           mac_mdio_connection.mdc
		.mdio_in       (eth_tse_0_mac_mdio_connection_mdio_in),                //                              .mdio_in
		.mdio_out      (eth_tse_0_mac_mdio_connection_mdio_out),               //                              .mdio_out
		.mdio_oen      (eth_tse_0_mac_mdio_connection_mdio_oen),               //                              .mdio_oen
		.ff_tx_crc_fwd (),                                                     //           mac_misc_connection.ff_tx_crc_fwd
		.ff_tx_septy   (),                                                     //                              .ff_tx_septy
		.tx_ff_uflow   (),                                                     //                              .tx_ff_uflow
		.ff_tx_a_full  (),                                                     //                              .ff_tx_a_full
		.ff_tx_a_empty (),                                                     //                              .ff_tx_a_empty
		.rx_err_stat   (),                                                     //                              .rx_err_stat
		.rx_frm_type   (),                                                     //                              .rx_frm_type
		.ff_rx_dsav    (),                                                     //                              .ff_rx_dsav
		.ff_rx_a_full  (),                                                     //                              .ff_rx_a_full
		.ff_rx_a_empty ()                                                      //                              .ff_rx_a_empty
	);

	my_ps_jtag_uart_0 jtag_uart_0 (
		.clk            (clk_clk),                                                     //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver4_irq)                                     //               irq.irq
	);

	my_ps_nios2_gen2_0 nios2_gen2_0 (
		.clk                                 (clk_clk),                                                    //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                            //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                         //                          .reset_req
		.d_address                           (nios2_gen2_0_data_master_address),                           //               data_master.address
		.d_byteenable                        (nios2_gen2_0_data_master_byteenable),                        //                          .byteenable
		.d_read                              (nios2_gen2_0_data_master_read),                              //                          .read
		.d_readdata                          (nios2_gen2_0_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (nios2_gen2_0_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (nios2_gen2_0_data_master_write),                             //                          .write
		.d_writedata                         (nios2_gen2_0_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (nios2_gen2_0_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (nios2_gen2_0_instruction_master_address),                    //        instruction_master.address
		.i_read                              (nios2_gen2_0_instruction_master_read),                       //                          .read
		.i_readdata                          (nios2_gen2_0_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (nios2_gen2_0_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (nios2_gen2_0_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (nios2_gen2_0_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                            // custom_instruction_master.readra
	);

	my_ps_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_clk),                                          //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),               //       .reset_req
		.freeze     (1'b0)                                              // (terminated)
	);

	my_ps_pio_0 pio_0 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),   //               reset.reset_n
		.address    (mm_interconnect_0_pio_0_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_0_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_0_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_0_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_0_s1_readdata),   //                    .readdata
		.out_port   (pio_0_external_connection_export)       // external_connection.export
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (4),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (512),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) rx_fifo (
		.in_clk            (rx_fifo_in_clk_clk),                   //        in_clk.clk
		.in_reset_n        (rx_fifo_in_clk_reset_reset_n),         //  in_clk_reset.reset_n
		.out_clk           (clk_clk),                              //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),  // out_clk_reset.reset_n
		.in_data           (rx_fifo_in_data),                      //            in.data
		.in_valid          (rx_fifo_in_valid),                     //              .valid
		.in_ready          (rx_fifo_in_ready),                     //              .ready
		.in_startofpacket  (rx_fifo_in_startofpacket),             //              .startofpacket
		.in_endofpacket    (rx_fifo_in_endofpacket),               //              .endofpacket
		.in_empty          (rx_fifo_in_empty),                     //              .empty
		.out_data          (rx_fifo_out_data),                     //           out.data
		.out_valid         (rx_fifo_out_valid),                    //              .valid
		.out_ready         (rx_fifo_out_ready),                    //              .ready
		.out_startofpacket (rx_fifo_out_startofpacket),            //              .startofpacket
		.out_endofpacket   (rx_fifo_out_endofpacket),              //              .endofpacket
		.out_empty         (rx_fifo_out_empty),                    //              .empty
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_error          (1'b0),                                 //   (terminated)
		.out_error         (),                                     //   (terminated)
		.in_channel        (1'b0),                                 //   (terminated)
		.out_channel       (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

	my_ps_sgdma_rx sgdma_rx (
		.clk                           (clk_clk),                                   //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_rx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_rx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_rx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_rx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_rx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_rx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_rx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_rx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_rx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_rx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_rx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_rx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_rx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_rx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_rx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver0_irq),                  //          csr_irq.irq
		.in_startofpacket              (avalon_st_adapter_001_out_0_startofpacket), //               in.startofpacket
		.in_endofpacket                (avalon_st_adapter_001_out_0_endofpacket),   //                 .endofpacket
		.in_data                       (avalon_st_adapter_001_out_0_data),          //                 .data
		.in_valid                      (avalon_st_adapter_001_out_0_valid),         //                 .valid
		.in_ready                      (avalon_st_adapter_001_out_0_ready),         //                 .ready
		.in_empty                      (avalon_st_adapter_001_out_0_empty),         //                 .empty
		.in_error                      (avalon_st_adapter_001_out_0_error),         //                 .error
		.m_write_waitrequest           (sgdma_rx_m_write_waitrequest),              //          m_write.waitrequest
		.m_write_address               (sgdma_rx_m_write_address),                  //                 .address
		.m_write_write                 (sgdma_rx_m_write_write),                    //                 .write
		.m_write_writedata             (sgdma_rx_m_write_writedata),                //                 .writedata
		.m_write_byteenable            (sgdma_rx_m_write_byteenable)                //                 .byteenable
	);

	my_ps_sgdma_rx_pcs sgdma_rx_pcs (
		.clk                           (clk_clk),                                       //              clk.clk
		.system_reset_n                (~rst_controller_001_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_rx_pcs_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_rx_pcs_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_rx_pcs_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_rx_pcs_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_rx_pcs_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_rx_pcs_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_rx_pcs_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_rx_pcs_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_rx_pcs_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_rx_pcs_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_rx_pcs_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_rx_pcs_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_rx_pcs_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_rx_pcs_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_rx_pcs_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver2_irq),                      //          csr_irq.irq
		.in_startofpacket              (rx_fifo_out_startofpacket),                     //               in.startofpacket
		.in_endofpacket                (rx_fifo_out_endofpacket),                       //                 .endofpacket
		.in_data                       (rx_fifo_out_data),                              //                 .data
		.in_valid                      (rx_fifo_out_valid),                             //                 .valid
		.in_ready                      (rx_fifo_out_ready),                             //                 .ready
		.in_empty                      (rx_fifo_out_empty),                             //                 .empty
		.m_write_waitrequest           (sgdma_rx_pcs_m_write_waitrequest),              //          m_write.waitrequest
		.m_write_address               (sgdma_rx_pcs_m_write_address),                  //                 .address
		.m_write_write                 (sgdma_rx_pcs_m_write_write),                    //                 .write
		.m_write_writedata             (sgdma_rx_pcs_m_write_writedata),                //                 .writedata
		.m_write_byteenable            (sgdma_rx_pcs_m_write_byteenable)                //                 .byteenable
	);

	my_ps_sgdma_tx sgdma_tx (
		.clk                           (clk_clk),                                   //              clk.clk
		.system_reset_n                (~rst_controller_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_tx_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_tx_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_tx_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_tx_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_tx_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_tx_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_tx_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_tx_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_tx_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_tx_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_tx_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_tx_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_tx_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_tx_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_tx_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver1_irq),                  //          csr_irq.irq
		.m_read_readdata               (sgdma_tx_m_read_readdata),                  //           m_read.readdata
		.m_read_readdatavalid          (sgdma_tx_m_read_readdatavalid),             //                 .readdatavalid
		.m_read_waitrequest            (sgdma_tx_m_read_waitrequest),               //                 .waitrequest
		.m_read_address                (sgdma_tx_m_read_address),                   //                 .address
		.m_read_read                   (sgdma_tx_m_read_read),                      //                 .read
		.out_data                      (sgdma_tx_out_data),                         //              out.data
		.out_valid                     (sgdma_tx_out_valid),                        //                 .valid
		.out_ready                     (sgdma_tx_out_ready),                        //                 .ready
		.out_endofpacket               (sgdma_tx_out_endofpacket),                  //                 .endofpacket
		.out_startofpacket             (sgdma_tx_out_startofpacket),                //                 .startofpacket
		.out_empty                     (sgdma_tx_out_empty)                         //                 .empty
	);

	my_ps_sgdma_tx sgdma_tx_pcs (
		.clk                           (clk_clk),                                       //              clk.clk
		.system_reset_n                (~rst_controller_001_reset_out_reset),           //            reset.reset_n
		.csr_chipselect                (mm_interconnect_0_sgdma_tx_pcs_csr_chipselect), //              csr.chipselect
		.csr_address                   (mm_interconnect_0_sgdma_tx_pcs_csr_address),    //                 .address
		.csr_read                      (mm_interconnect_0_sgdma_tx_pcs_csr_read),       //                 .read
		.csr_write                     (mm_interconnect_0_sgdma_tx_pcs_csr_write),      //                 .write
		.csr_writedata                 (mm_interconnect_0_sgdma_tx_pcs_csr_writedata),  //                 .writedata
		.csr_readdata                  (mm_interconnect_0_sgdma_tx_pcs_csr_readdata),   //                 .readdata
		.descriptor_read_readdata      (sgdma_tx_pcs_descriptor_read_readdata),         //  descriptor_read.readdata
		.descriptor_read_readdatavalid (sgdma_tx_pcs_descriptor_read_readdatavalid),    //                 .readdatavalid
		.descriptor_read_waitrequest   (sgdma_tx_pcs_descriptor_read_waitrequest),      //                 .waitrequest
		.descriptor_read_address       (sgdma_tx_pcs_descriptor_read_address),          //                 .address
		.descriptor_read_read          (sgdma_tx_pcs_descriptor_read_read),             //                 .read
		.descriptor_write_waitrequest  (sgdma_tx_pcs_descriptor_write_waitrequest),     // descriptor_write.waitrequest
		.descriptor_write_address      (sgdma_tx_pcs_descriptor_write_address),         //                 .address
		.descriptor_write_write        (sgdma_tx_pcs_descriptor_write_write),           //                 .write
		.descriptor_write_writedata    (sgdma_tx_pcs_descriptor_write_writedata),       //                 .writedata
		.csr_irq                       (irq_mapper_receiver3_irq),                      //          csr_irq.irq
		.m_read_readdata               (sgdma_tx_pcs_m_read_readdata),                  //           m_read.readdata
		.m_read_readdatavalid          (sgdma_tx_pcs_m_read_readdatavalid),             //                 .readdatavalid
		.m_read_waitrequest            (sgdma_tx_pcs_m_read_waitrequest),               //                 .waitrequest
		.m_read_address                (sgdma_tx_pcs_m_read_address),                   //                 .address
		.m_read_read                   (sgdma_tx_pcs_m_read_read),                      //                 .read
		.out_data                      (sgdma_tx_pcs_out_data),                         //              out.data
		.out_valid                     (sgdma_tx_pcs_out_valid),                        //                 .valid
		.out_ready                     (sgdma_tx_pcs_out_ready),                        //                 .ready
		.out_endofpacket               (sgdma_tx_pcs_out_endofpacket),                  //                 .endofpacket
		.out_startofpacket             (sgdma_tx_pcs_out_startofpacket),                //                 .startofpacket
		.out_empty                     (sgdma_tx_pcs_out_empty)                         //                 .empty
	);

	my_ps_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clk_clk),                                               //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	my_ps_timer_0 timer_0 (
		.clk        (clk_clk),                                 //   clk.clk
		.reset_n    (~rst_controller_001_reset_out_reset),     // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver5_irq)                 //   irq.irq
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (4),
		.BITS_PER_SYMBOL    (8),
		.FIFO_DEPTH         (512),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) tx_fifo (
		.in_clk            (clk_clk),                              //        in_clk.clk
		.in_reset_n        (~rst_controller_001_reset_out_reset),  //  in_clk_reset.reset_n
		.out_clk           (tx_fifo_out_clk_clk),                  //       out_clk.clk
		.out_reset_n       (tx_fifo_out_clk_reset_reset_n),        // out_clk_reset.reset_n
		.in_data           (sgdma_tx_pcs_out_data),                //            in.data
		.in_valid          (sgdma_tx_pcs_out_valid),               //              .valid
		.in_ready          (sgdma_tx_pcs_out_ready),               //              .ready
		.in_startofpacket  (sgdma_tx_pcs_out_startofpacket),       //              .startofpacket
		.in_endofpacket    (sgdma_tx_pcs_out_endofpacket),         //              .endofpacket
		.in_empty          (sgdma_tx_pcs_out_empty),               //              .empty
		.out_data          (tx_fifo_out_data),                     //           out.data
		.out_valid         (tx_fifo_out_valid),                    //              .valid
		.out_ready         (tx_fifo_out_ready),                    //              .ready
		.out_startofpacket (tx_fifo_out_startofpacket),            //              .startofpacket
		.out_endofpacket   (tx_fifo_out_endofpacket),              //              .endofpacket
		.out_empty         (tx_fifo_out_empty),                    //              .empty
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_error          (1'b0),                                 //   (terminated)
		.out_error         (),                                     //   (terminated)
		.in_channel        (1'b0),                                 //   (terminated)
		.out_channel       (),                                     //   (terminated)
		.space_avail_data  ()                                      //   (terminated)
	);

	my_ps_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                  (clk_clk),                                                     //                                clk_0_clk.clk
		.nios2_gen2_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                              // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		.sgdma_tx_pcs_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                          // sgdma_tx_pcs_reset_reset_bridge_in_reset.reset
		.nios2_gen2_0_data_master_address               (nios2_gen2_0_data_master_address),                            //                 nios2_gen2_0_data_master.address
		.nios2_gen2_0_data_master_waitrequest           (nios2_gen2_0_data_master_waitrequest),                        //                                         .waitrequest
		.nios2_gen2_0_data_master_byteenable            (nios2_gen2_0_data_master_byteenable),                         //                                         .byteenable
		.nios2_gen2_0_data_master_read                  (nios2_gen2_0_data_master_read),                               //                                         .read
		.nios2_gen2_0_data_master_readdata              (nios2_gen2_0_data_master_readdata),                           //                                         .readdata
		.nios2_gen2_0_data_master_write                 (nios2_gen2_0_data_master_write),                              //                                         .write
		.nios2_gen2_0_data_master_writedata             (nios2_gen2_0_data_master_writedata),                          //                                         .writedata
		.nios2_gen2_0_data_master_debugaccess           (nios2_gen2_0_data_master_debugaccess),                        //                                         .debugaccess
		.nios2_gen2_0_instruction_master_address        (nios2_gen2_0_instruction_master_address),                     //          nios2_gen2_0_instruction_master.address
		.nios2_gen2_0_instruction_master_waitrequest    (nios2_gen2_0_instruction_master_waitrequest),                 //                                         .waitrequest
		.nios2_gen2_0_instruction_master_read           (nios2_gen2_0_instruction_master_read),                        //                                         .read
		.nios2_gen2_0_instruction_master_readdata       (nios2_gen2_0_instruction_master_readdata),                    //                                         .readdata
		.sgdma_rx_descriptor_read_address               (sgdma_rx_descriptor_read_address),                            //                 sgdma_rx_descriptor_read.address
		.sgdma_rx_descriptor_read_waitrequest           (sgdma_rx_descriptor_read_waitrequest),                        //                                         .waitrequest
		.sgdma_rx_descriptor_read_read                  (sgdma_rx_descriptor_read_read),                               //                                         .read
		.sgdma_rx_descriptor_read_readdata              (sgdma_rx_descriptor_read_readdata),                           //                                         .readdata
		.sgdma_rx_descriptor_read_readdatavalid         (sgdma_rx_descriptor_read_readdatavalid),                      //                                         .readdatavalid
		.sgdma_rx_descriptor_write_address              (sgdma_rx_descriptor_write_address),                           //                sgdma_rx_descriptor_write.address
		.sgdma_rx_descriptor_write_waitrequest          (sgdma_rx_descriptor_write_waitrequest),                       //                                         .waitrequest
		.sgdma_rx_descriptor_write_write                (sgdma_rx_descriptor_write_write),                             //                                         .write
		.sgdma_rx_descriptor_write_writedata            (sgdma_rx_descriptor_write_writedata),                         //                                         .writedata
		.sgdma_rx_m_write_address                       (sgdma_rx_m_write_address),                                    //                         sgdma_rx_m_write.address
		.sgdma_rx_m_write_waitrequest                   (sgdma_rx_m_write_waitrequest),                                //                                         .waitrequest
		.sgdma_rx_m_write_byteenable                    (sgdma_rx_m_write_byteenable),                                 //                                         .byteenable
		.sgdma_rx_m_write_write                         (sgdma_rx_m_write_write),                                      //                                         .write
		.sgdma_rx_m_write_writedata                     (sgdma_rx_m_write_writedata),                                  //                                         .writedata
		.sgdma_rx_pcs_descriptor_read_address           (sgdma_rx_pcs_descriptor_read_address),                        //             sgdma_rx_pcs_descriptor_read.address
		.sgdma_rx_pcs_descriptor_read_waitrequest       (sgdma_rx_pcs_descriptor_read_waitrequest),                    //                                         .waitrequest
		.sgdma_rx_pcs_descriptor_read_read              (sgdma_rx_pcs_descriptor_read_read),                           //                                         .read
		.sgdma_rx_pcs_descriptor_read_readdata          (sgdma_rx_pcs_descriptor_read_readdata),                       //                                         .readdata
		.sgdma_rx_pcs_descriptor_read_readdatavalid     (sgdma_rx_pcs_descriptor_read_readdatavalid),                  //                                         .readdatavalid
		.sgdma_rx_pcs_descriptor_write_address          (sgdma_rx_pcs_descriptor_write_address),                       //            sgdma_rx_pcs_descriptor_write.address
		.sgdma_rx_pcs_descriptor_write_waitrequest      (sgdma_rx_pcs_descriptor_write_waitrequest),                   //                                         .waitrequest
		.sgdma_rx_pcs_descriptor_write_write            (sgdma_rx_pcs_descriptor_write_write),                         //                                         .write
		.sgdma_rx_pcs_descriptor_write_writedata        (sgdma_rx_pcs_descriptor_write_writedata),                     //                                         .writedata
		.sgdma_rx_pcs_m_write_address                   (sgdma_rx_pcs_m_write_address),                                //                     sgdma_rx_pcs_m_write.address
		.sgdma_rx_pcs_m_write_waitrequest               (sgdma_rx_pcs_m_write_waitrequest),                            //                                         .waitrequest
		.sgdma_rx_pcs_m_write_byteenable                (sgdma_rx_pcs_m_write_byteenable),                             //                                         .byteenable
		.sgdma_rx_pcs_m_write_write                     (sgdma_rx_pcs_m_write_write),                                  //                                         .write
		.sgdma_rx_pcs_m_write_writedata                 (sgdma_rx_pcs_m_write_writedata),                              //                                         .writedata
		.sgdma_tx_descriptor_read_address               (sgdma_tx_descriptor_read_address),                            //                 sgdma_tx_descriptor_read.address
		.sgdma_tx_descriptor_read_waitrequest           (sgdma_tx_descriptor_read_waitrequest),                        //                                         .waitrequest
		.sgdma_tx_descriptor_read_read                  (sgdma_tx_descriptor_read_read),                               //                                         .read
		.sgdma_tx_descriptor_read_readdata              (sgdma_tx_descriptor_read_readdata),                           //                                         .readdata
		.sgdma_tx_descriptor_read_readdatavalid         (sgdma_tx_descriptor_read_readdatavalid),                      //                                         .readdatavalid
		.sgdma_tx_descriptor_write_address              (sgdma_tx_descriptor_write_address),                           //                sgdma_tx_descriptor_write.address
		.sgdma_tx_descriptor_write_waitrequest          (sgdma_tx_descriptor_write_waitrequest),                       //                                         .waitrequest
		.sgdma_tx_descriptor_write_write                (sgdma_tx_descriptor_write_write),                             //                                         .write
		.sgdma_tx_descriptor_write_writedata            (sgdma_tx_descriptor_write_writedata),                         //                                         .writedata
		.sgdma_tx_m_read_address                        (sgdma_tx_m_read_address),                                     //                          sgdma_tx_m_read.address
		.sgdma_tx_m_read_waitrequest                    (sgdma_tx_m_read_waitrequest),                                 //                                         .waitrequest
		.sgdma_tx_m_read_read                           (sgdma_tx_m_read_read),                                        //                                         .read
		.sgdma_tx_m_read_readdata                       (sgdma_tx_m_read_readdata),                                    //                                         .readdata
		.sgdma_tx_m_read_readdatavalid                  (sgdma_tx_m_read_readdatavalid),                               //                                         .readdatavalid
		.sgdma_tx_pcs_descriptor_read_address           (sgdma_tx_pcs_descriptor_read_address),                        //             sgdma_tx_pcs_descriptor_read.address
		.sgdma_tx_pcs_descriptor_read_waitrequest       (sgdma_tx_pcs_descriptor_read_waitrequest),                    //                                         .waitrequest
		.sgdma_tx_pcs_descriptor_read_read              (sgdma_tx_pcs_descriptor_read_read),                           //                                         .read
		.sgdma_tx_pcs_descriptor_read_readdata          (sgdma_tx_pcs_descriptor_read_readdata),                       //                                         .readdata
		.sgdma_tx_pcs_descriptor_read_readdatavalid     (sgdma_tx_pcs_descriptor_read_readdatavalid),                  //                                         .readdatavalid
		.sgdma_tx_pcs_descriptor_write_address          (sgdma_tx_pcs_descriptor_write_address),                       //            sgdma_tx_pcs_descriptor_write.address
		.sgdma_tx_pcs_descriptor_write_waitrequest      (sgdma_tx_pcs_descriptor_write_waitrequest),                   //                                         .waitrequest
		.sgdma_tx_pcs_descriptor_write_write            (sgdma_tx_pcs_descriptor_write_write),                         //                                         .write
		.sgdma_tx_pcs_descriptor_write_writedata        (sgdma_tx_pcs_descriptor_write_writedata),                     //                                         .writedata
		.sgdma_tx_pcs_m_read_address                    (sgdma_tx_pcs_m_read_address),                                 //                      sgdma_tx_pcs_m_read.address
		.sgdma_tx_pcs_m_read_waitrequest                (sgdma_tx_pcs_m_read_waitrequest),                             //                                         .waitrequest
		.sgdma_tx_pcs_m_read_read                       (sgdma_tx_pcs_m_read_read),                                    //                                         .read
		.sgdma_tx_pcs_m_read_readdata                   (sgdma_tx_pcs_m_read_readdata),                                //                                         .readdata
		.sgdma_tx_pcs_m_read_readdatavalid              (sgdma_tx_pcs_m_read_readdatavalid),                           //                                         .readdatavalid
		.descriptor_mem_s1_address                      (mm_interconnect_0_descriptor_mem_s1_address),                 //                        descriptor_mem_s1.address
		.descriptor_mem_s1_write                        (mm_interconnect_0_descriptor_mem_s1_write),                   //                                         .write
		.descriptor_mem_s1_readdata                     (mm_interconnect_0_descriptor_mem_s1_readdata),                //                                         .readdata
		.descriptor_mem_s1_writedata                    (mm_interconnect_0_descriptor_mem_s1_writedata),               //                                         .writedata
		.descriptor_mem_s1_byteenable                   (mm_interconnect_0_descriptor_mem_s1_byteenable),              //                                         .byteenable
		.descriptor_mem_s1_chipselect                   (mm_interconnect_0_descriptor_mem_s1_chipselect),              //                                         .chipselect
		.descriptor_mem_s1_clken                        (mm_interconnect_0_descriptor_mem_s1_clken),                   //                                         .clken
		.descriptor_mem_pcs_s1_address                  (mm_interconnect_0_descriptor_mem_pcs_s1_address),             //                    descriptor_mem_pcs_s1.address
		.descriptor_mem_pcs_s1_write                    (mm_interconnect_0_descriptor_mem_pcs_s1_write),               //                                         .write
		.descriptor_mem_pcs_s1_readdata                 (mm_interconnect_0_descriptor_mem_pcs_s1_readdata),            //                                         .readdata
		.descriptor_mem_pcs_s1_writedata                (mm_interconnect_0_descriptor_mem_pcs_s1_writedata),           //                                         .writedata
		.descriptor_mem_pcs_s1_byteenable               (mm_interconnect_0_descriptor_mem_pcs_s1_byteenable),          //                                         .byteenable
		.descriptor_mem_pcs_s1_chipselect               (mm_interconnect_0_descriptor_mem_pcs_s1_chipselect),          //                                         .chipselect
		.descriptor_mem_pcs_s1_clken                    (mm_interconnect_0_descriptor_mem_pcs_s1_clken),               //                                         .clken
		.eth_tse_0_control_port_address                 (mm_interconnect_0_eth_tse_0_control_port_address),            //                   eth_tse_0_control_port.address
		.eth_tse_0_control_port_write                   (mm_interconnect_0_eth_tse_0_control_port_write),              //                                         .write
		.eth_tse_0_control_port_read                    (mm_interconnect_0_eth_tse_0_control_port_read),               //                                         .read
		.eth_tse_0_control_port_readdata                (mm_interconnect_0_eth_tse_0_control_port_readdata),           //                                         .readdata
		.eth_tse_0_control_port_writedata               (mm_interconnect_0_eth_tse_0_control_port_writedata),          //                                         .writedata
		.eth_tse_0_control_port_waitrequest             (mm_interconnect_0_eth_tse_0_control_port_waitrequest),        //                                         .waitrequest
		.jtag_uart_0_avalon_jtag_slave_address          (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //            jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write            (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),       //                                         .write
		.jtag_uart_0_avalon_jtag_slave_read             (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),        //                                         .read
		.jtag_uart_0_avalon_jtag_slave_readdata         (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                                         .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata        (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                                         .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                                         .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //                                         .chipselect
		.nios2_gen2_0_debug_mem_slave_address           (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_address),      //             nios2_gen2_0_debug_mem_slave.address
		.nios2_gen2_0_debug_mem_slave_write             (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_write),        //                                         .write
		.nios2_gen2_0_debug_mem_slave_read              (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_read),         //                                         .read
		.nios2_gen2_0_debug_mem_slave_readdata          (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_readdata),     //                                         .readdata
		.nios2_gen2_0_debug_mem_slave_writedata         (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_writedata),    //                                         .writedata
		.nios2_gen2_0_debug_mem_slave_byteenable        (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_byteenable),   //                                         .byteenable
		.nios2_gen2_0_debug_mem_slave_waitrequest       (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_waitrequest),  //                                         .waitrequest
		.nios2_gen2_0_debug_mem_slave_debugaccess       (mm_interconnect_0_nios2_gen2_0_debug_mem_slave_debugaccess),  //                                         .debugaccess
		.onchip_memory2_0_s1_address                    (mm_interconnect_0_onchip_memory2_0_s1_address),               //                      onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                      (mm_interconnect_0_onchip_memory2_0_s1_write),                 //                                         .write
		.onchip_memory2_0_s1_readdata                   (mm_interconnect_0_onchip_memory2_0_s1_readdata),              //                                         .readdata
		.onchip_memory2_0_s1_writedata                  (mm_interconnect_0_onchip_memory2_0_s1_writedata),             //                                         .writedata
		.onchip_memory2_0_s1_byteenable                 (mm_interconnect_0_onchip_memory2_0_s1_byteenable),            //                                         .byteenable
		.onchip_memory2_0_s1_chipselect                 (mm_interconnect_0_onchip_memory2_0_s1_chipselect),            //                                         .chipselect
		.onchip_memory2_0_s1_clken                      (mm_interconnect_0_onchip_memory2_0_s1_clken),                 //                                         .clken
		.pio_0_s1_address                               (mm_interconnect_0_pio_0_s1_address),                          //                                 pio_0_s1.address
		.pio_0_s1_write                                 (mm_interconnect_0_pio_0_s1_write),                            //                                         .write
		.pio_0_s1_readdata                              (mm_interconnect_0_pio_0_s1_readdata),                         //                                         .readdata
		.pio_0_s1_writedata                             (mm_interconnect_0_pio_0_s1_writedata),                        //                                         .writedata
		.pio_0_s1_chipselect                            (mm_interconnect_0_pio_0_s1_chipselect),                       //                                         .chipselect
		.sgdma_rx_csr_address                           (mm_interconnect_0_sgdma_rx_csr_address),                      //                             sgdma_rx_csr.address
		.sgdma_rx_csr_write                             (mm_interconnect_0_sgdma_rx_csr_write),                        //                                         .write
		.sgdma_rx_csr_read                              (mm_interconnect_0_sgdma_rx_csr_read),                         //                                         .read
		.sgdma_rx_csr_readdata                          (mm_interconnect_0_sgdma_rx_csr_readdata),                     //                                         .readdata
		.sgdma_rx_csr_writedata                         (mm_interconnect_0_sgdma_rx_csr_writedata),                    //                                         .writedata
		.sgdma_rx_csr_chipselect                        (mm_interconnect_0_sgdma_rx_csr_chipselect),                   //                                         .chipselect
		.sgdma_rx_pcs_csr_address                       (mm_interconnect_0_sgdma_rx_pcs_csr_address),                  //                         sgdma_rx_pcs_csr.address
		.sgdma_rx_pcs_csr_write                         (mm_interconnect_0_sgdma_rx_pcs_csr_write),                    //                                         .write
		.sgdma_rx_pcs_csr_read                          (mm_interconnect_0_sgdma_rx_pcs_csr_read),                     //                                         .read
		.sgdma_rx_pcs_csr_readdata                      (mm_interconnect_0_sgdma_rx_pcs_csr_readdata),                 //                                         .readdata
		.sgdma_rx_pcs_csr_writedata                     (mm_interconnect_0_sgdma_rx_pcs_csr_writedata),                //                                         .writedata
		.sgdma_rx_pcs_csr_chipselect                    (mm_interconnect_0_sgdma_rx_pcs_csr_chipselect),               //                                         .chipselect
		.sgdma_tx_csr_address                           (mm_interconnect_0_sgdma_tx_csr_address),                      //                             sgdma_tx_csr.address
		.sgdma_tx_csr_write                             (mm_interconnect_0_sgdma_tx_csr_write),                        //                                         .write
		.sgdma_tx_csr_read                              (mm_interconnect_0_sgdma_tx_csr_read),                         //                                         .read
		.sgdma_tx_csr_readdata                          (mm_interconnect_0_sgdma_tx_csr_readdata),                     //                                         .readdata
		.sgdma_tx_csr_writedata                         (mm_interconnect_0_sgdma_tx_csr_writedata),                    //                                         .writedata
		.sgdma_tx_csr_chipselect                        (mm_interconnect_0_sgdma_tx_csr_chipselect),                   //                                         .chipselect
		.sgdma_tx_pcs_csr_address                       (mm_interconnect_0_sgdma_tx_pcs_csr_address),                  //                         sgdma_tx_pcs_csr.address
		.sgdma_tx_pcs_csr_write                         (mm_interconnect_0_sgdma_tx_pcs_csr_write),                    //                                         .write
		.sgdma_tx_pcs_csr_read                          (mm_interconnect_0_sgdma_tx_pcs_csr_read),                     //                                         .read
		.sgdma_tx_pcs_csr_readdata                      (mm_interconnect_0_sgdma_tx_pcs_csr_readdata),                 //                                         .readdata
		.sgdma_tx_pcs_csr_writedata                     (mm_interconnect_0_sgdma_tx_pcs_csr_writedata),                //                                         .writedata
		.sgdma_tx_pcs_csr_chipselect                    (mm_interconnect_0_sgdma_tx_pcs_csr_chipselect),               //                                         .chipselect
		.sysid_qsys_0_control_slave_address             (mm_interconnect_0_sysid_qsys_0_control_slave_address),        //               sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata            (mm_interconnect_0_sysid_qsys_0_control_slave_readdata),       //                                         .readdata
		.timer_0_s1_address                             (mm_interconnect_0_timer_0_s1_address),                        //                               timer_0_s1.address
		.timer_0_s1_write                               (mm_interconnect_0_timer_0_s1_write),                          //                                         .write
		.timer_0_s1_readdata                            (mm_interconnect_0_timer_0_s1_readdata),                       //                                         .readdata
		.timer_0_s1_writedata                           (mm_interconnect_0_timer_0_s1_writedata),                      //                                         .writedata
		.timer_0_s1_chipselect                          (mm_interconnect_0_timer_0_s1_chipselect)                      //                                         .chipselect
	);

	my_ps_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),       // receiver4.irq
		.receiver5_irq (irq_mapper_receiver5_irq),       // receiver5.irq
		.sender_irq    (nios2_gen2_0_irq_irq)            //    sender.irq
	);

	my_ps_avalon_st_adapter #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (32),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),        // in_rst_0.reset
		.in_0_data           (sgdma_tx_out_data),                     //     in_0.data
		.in_0_valid          (sgdma_tx_out_valid),                    //         .valid
		.in_0_ready          (sgdma_tx_out_ready),                    //         .ready
		.in_0_startofpacket  (sgdma_tx_out_startofpacket),            //         .startofpacket
		.in_0_endofpacket    (sgdma_tx_out_endofpacket),              //         .endofpacket
		.in_0_empty          (sgdma_tx_out_empty),                    //         .empty
		.out_0_data          (avalon_st_adapter_out_0_data),          //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),         //         .valid
		.out_0_ready         (avalon_st_adapter_out_0_ready),         //         .ready
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket), //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),   //         .endofpacket
		.out_0_empty         (avalon_st_adapter_out_0_empty),         //         .empty
		.out_0_error         (avalon_st_adapter_out_0_error)          //         .error
	);

	my_ps_avalon_st_adapter_001 #(
		.inBitsPerSymbol (8),
		.inUsePackets    (1),
		.inDataWidth     (32),
		.inChannelWidth  (0),
		.inErrorWidth    (6),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (2),
		.outDataWidth    (32),
		.outChannelWidth (0),
		.outErrorWidth   (6),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk        (clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset      (rst_controller_reset_out_reset),            // in_rst_0.reset
		.in_0_data           (eth_tse_0_receive_data),                    //     in_0.data
		.in_0_valid          (eth_tse_0_receive_valid),                   //         .valid
		.in_0_ready          (eth_tse_0_receive_ready),                   //         .ready
		.in_0_startofpacket  (eth_tse_0_receive_startofpacket),           //         .startofpacket
		.in_0_endofpacket    (eth_tse_0_receive_endofpacket),             //         .endofpacket
		.in_0_empty          (eth_tse_0_receive_empty),                   //         .empty
		.in_0_error          (eth_tse_0_receive_error),                   //         .error
		.out_0_data          (avalon_st_adapter_001_out_0_data),          //    out_0.data
		.out_0_valid         (avalon_st_adapter_001_out_0_valid),         //         .valid
		.out_0_ready         (avalon_st_adapter_001_out_0_ready),         //         .ready
		.out_0_startofpacket (avalon_st_adapter_001_out_0_startofpacket), //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_001_out_0_endofpacket),   //         .endofpacket
		.out_0_empty         (avalon_st_adapter_001_out_0_empty),         //         .empty
		.out_0_error         (avalon_st_adapter_001_out_0_error)          //         .error
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (nios2_gen2_0_debug_reset_request_reset), // reset_in1.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),         // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),     //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.clk            (clk_clk),                                //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_in1      (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

endmodule
