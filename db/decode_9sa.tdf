--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="CYCLONEIVE" LPM_DECODES=14 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_9sa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[13..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[13..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode108w[3..0]	: WIRE;
	w_anode118w[3..0]	: WIRE;
	w_anode128w[3..0]	: WIRE;
	w_anode138w[3..0]	: WIRE;
	w_anode148w[3..0]	: WIRE;
	w_anode160w[1..0]	: WIRE;
	w_anode167w[3..0]	: WIRE;
	w_anode178w[3..0]	: WIRE;
	w_anode188w[3..0]	: WIRE;
	w_anode198w[3..0]	: WIRE;
	w_anode208w[3..0]	: WIRE;
	w_anode218w[3..0]	: WIRE;
	w_anode228w[3..0]	: WIRE;
	w_anode238w[3..0]	: WIRE;
	w_anode62w[1..0]	: WIRE;
	w_anode71w[3..0]	: WIRE;
	w_anode88w[3..0]	: WIRE;
	w_anode98w[3..0]	: WIRE;
	w_data60w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[13..0] = eq_wire[13..0];
	eq_wire[] = ( ( w_anode238w[3..3], w_anode228w[3..3], w_anode218w[3..3], w_anode208w[3..3], w_anode198w[3..3], w_anode188w[3..3], w_anode178w[3..3], w_anode167w[3..3]), ( w_anode148w[3..3], w_anode138w[3..3], w_anode128w[3..3], w_anode118w[3..3], w_anode108w[3..3], w_anode98w[3..3], w_anode88w[3..3], w_anode71w[3..3]));
	w_anode108w[] = ( (w_anode108w[2..2] & (! w_data60w[2..2])), (w_anode108w[1..1] & w_data60w[1..1]), (w_anode108w[0..0] & w_data60w[0..0]), w_anode62w[1..1]);
	w_anode118w[] = ( (w_anode118w[2..2] & w_data60w[2..2]), (w_anode118w[1..1] & (! w_data60w[1..1])), (w_anode118w[0..0] & (! w_data60w[0..0])), w_anode62w[1..1]);
	w_anode128w[] = ( (w_anode128w[2..2] & w_data60w[2..2]), (w_anode128w[1..1] & (! w_data60w[1..1])), (w_anode128w[0..0] & w_data60w[0..0]), w_anode62w[1..1]);
	w_anode138w[] = ( (w_anode138w[2..2] & w_data60w[2..2]), (w_anode138w[1..1] & w_data60w[1..1]), (w_anode138w[0..0] & (! w_data60w[0..0])), w_anode62w[1..1]);
	w_anode148w[] = ( (w_anode148w[2..2] & w_data60w[2..2]), (w_anode148w[1..1] & w_data60w[1..1]), (w_anode148w[0..0] & w_data60w[0..0]), w_anode62w[1..1]);
	w_anode160w[] = ( (w_anode160w[0..0] & data_wire[3..3]), enable_wire);
	w_anode167w[] = ( (w_anode167w[2..2] & (! w_data60w[2..2])), (w_anode167w[1..1] & (! w_data60w[1..1])), (w_anode167w[0..0] & (! w_data60w[0..0])), w_anode160w[1..1]);
	w_anode178w[] = ( (w_anode178w[2..2] & (! w_data60w[2..2])), (w_anode178w[1..1] & (! w_data60w[1..1])), (w_anode178w[0..0] & w_data60w[0..0]), w_anode160w[1..1]);
	w_anode188w[] = ( (w_anode188w[2..2] & (! w_data60w[2..2])), (w_anode188w[1..1] & w_data60w[1..1]), (w_anode188w[0..0] & (! w_data60w[0..0])), w_anode160w[1..1]);
	w_anode198w[] = ( (w_anode198w[2..2] & (! w_data60w[2..2])), (w_anode198w[1..1] & w_data60w[1..1]), (w_anode198w[0..0] & w_data60w[0..0]), w_anode160w[1..1]);
	w_anode208w[] = ( (w_anode208w[2..2] & w_data60w[2..2]), (w_anode208w[1..1] & (! w_data60w[1..1])), (w_anode208w[0..0] & (! w_data60w[0..0])), w_anode160w[1..1]);
	w_anode218w[] = ( (w_anode218w[2..2] & w_data60w[2..2]), (w_anode218w[1..1] & (! w_data60w[1..1])), (w_anode218w[0..0] & w_data60w[0..0]), w_anode160w[1..1]);
	w_anode228w[] = ( (w_anode228w[2..2] & w_data60w[2..2]), (w_anode228w[1..1] & w_data60w[1..1]), (w_anode228w[0..0] & (! w_data60w[0..0])), w_anode160w[1..1]);
	w_anode238w[] = ( (w_anode238w[2..2] & w_data60w[2..2]), (w_anode238w[1..1] & w_data60w[1..1]), (w_anode238w[0..0] & w_data60w[0..0]), w_anode160w[1..1]);
	w_anode62w[] = ( (w_anode62w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode71w[] = ( (w_anode71w[2..2] & (! w_data60w[2..2])), (w_anode71w[1..1] & (! w_data60w[1..1])), (w_anode71w[0..0] & (! w_data60w[0..0])), w_anode62w[1..1]);
	w_anode88w[] = ( (w_anode88w[2..2] & (! w_data60w[2..2])), (w_anode88w[1..1] & (! w_data60w[1..1])), (w_anode88w[0..0] & w_data60w[0..0]), w_anode62w[1..1]);
	w_anode98w[] = ( (w_anode98w[2..2] & (! w_data60w[2..2])), (w_anode98w[1..1] & w_data60w[1..1]), (w_anode98w[0..0] & (! w_data60w[0..0])), w_anode62w[1..1]);
	w_data60w[2..0] = data_wire[2..0];
END;
--VALID FILE
